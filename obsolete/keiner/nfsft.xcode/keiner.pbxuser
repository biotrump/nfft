// !$*UTF8*$!
{
	08FB7793FE84155DC02AAC07 = {
		activeBuildStyle = 014CEA460018CE2711CA2923;
		activeExecutable = 4EB20A1E07D4B30C00FD1AB8;
		activeTarget = 8DD76F620486A84900D96B5E;
		addToTargets = (
			8DD76F620486A84900D96B5E,
		);
		breakpoints = (
			4E6EA3EF083E9C9D004C5D07,
		);
		codeSenseManager = 4E25C4AC070DDADD0005BF02;
		executables = (
			4EB20A1E07D4B30C00FD1AB8,
			4E6E40E9082CB6C600642FF0,
		);
		perUserDictionary = {
			PBXConfiguration.PBXFileTableDataSource3.PBXBookmarksDataSource = {
				PBXFileTableDataSourceColumnSortingDirectionKey = "-1";
				PBXFileTableDataSourceColumnSortingKey = PBXBookmarksDataSource_NameID;
				PBXFileTableDataSourceColumnWidthsKey = (
					245.2085,
					228.5991,
					255.5835,
				);
				PBXFileTableDataSourceColumnsKey = (
					PBXBookmarksDataSource_LocationID,
					PBXBookmarksDataSource_NameID,
					PBXBookmarksDataSource_CommentsID,
				);
			};
			PBXConfiguration.PBXFileTableDataSource3.PBXErrorsWarningsDataSource = {
				PBXFileTableDataSourceColumnSortingDirectionKey = "-1";
				PBXFileTableDataSourceColumnSortingKey = PBXErrorsWarningsDataSource_LocationID;
				PBXFileTableDataSourceColumnWidthsKey = (
					20,
					577.8799,
					311.2085,
				);
				PBXFileTableDataSourceColumnsKey = (
					PBXErrorsWarningsDataSource_TypeID,
					PBXErrorsWarningsDataSource_MessageID,
					PBXErrorsWarningsDataSource_LocationID,
				);
			};
			PBXConfiguration.PBXFileTableDataSource3.PBXExecutablesDataSource = {
				PBXFileTableDataSourceColumnSortingDirectionKey = "-1";
				PBXFileTableDataSourceColumnSortingKey = PBXExecutablesDataSource_NameID;
				PBXFileTableDataSourceColumnWidthsKey = (
					22,
					632.7974,
					327.5835,
				);
				PBXFileTableDataSourceColumnsKey = (
					PBXExecutablesDataSource_ActiveFlagID,
					PBXExecutablesDataSource_NameID,
					PBXExecutablesDataSource_CommentsID,
				);
			};
			PBXConfiguration.PBXFileTableDataSource3.PBXFileTableDataSource = {
				PBXFileTableDataSourceColumnSortingDirectionKey = "-1";
				PBXFileTableDataSourceColumnSortingKey = PBXFileDataSource_Filename_ColumnID;
				PBXFileTableDataSourceColumnWidthsKey = (
					20,
					696,
					20,
					124,
					43,
					43,
					20,
				);
				PBXFileTableDataSourceColumnsKey = (
					PBXFileDataSource_FiletypeID,
					PBXFileDataSource_Filename_ColumnID,
					PBXFileDataSource_Built_ColumnID,
					PBXFileDataSource_ObjectSize_ColumnID,
					PBXFileDataSource_Errors_ColumnID,
					PBXFileDataSource_Warnings_ColumnID,
					PBXFileDataSource_Target_ColumnID,
				);
			};
			PBXConfiguration.PBXFileTableDataSource3.PBXFindDataSource = {
				PBXFileTableDataSourceColumnSortingDirectionKey = "-1";
				PBXFileTableDataSourceColumnSortingKey = PBXFindDataSource_LocationID;
				PBXFileTableDataSourceColumnWidthsKey = (
					333.2974,
					336.2085,
				);
				PBXFileTableDataSourceColumnsKey = (
					PBXFindDataSource_MessageID,
					PBXFindDataSource_LocationID,
				);
			};
			PBXConfiguration.PBXFileTableDataSource3.PBXSymbolsDataSource = {
				PBXFileTableDataSourceColumnSortingDirectionKey = "-1";
				PBXFileTableDataSourceColumnSortingKey = PBXSymbolsDataSource_SymbolNameID;
				PBXFileTableDataSourceColumnWidthsKey = (
					16,
					279.8008,
					309.0356,
					286.2085,
				);
				PBXFileTableDataSourceColumnsKey = (
					PBXSymbolsDataSource_SymbolTypeIconID,
					PBXSymbolsDataSource_SymbolNameID,
					PBXSymbolsDataSource_SymbolTypeID,
					PBXSymbolsDataSource_ReferenceNameID,
				);
			};
			PBXConfiguration.PBXFileTableDataSource3.XCSCMDataSource = {
				PBXFileTableDataSourceColumnSortingDirectionKey = "-1";
				PBXFileTableDataSourceColumnSortingKey = PBXFileDataSource_Filename_ColumnID;
				PBXFileTableDataSourceColumnWidthsKey = (
					20,
					20,
					671,
					20,
					104,
					43,
					43,
					20,
				);
				PBXFileTableDataSourceColumnsKey = (
					PBXFileDataSource_SCM_ColumnID,
					PBXFileDataSource_FiletypeID,
					PBXFileDataSource_Filename_ColumnID,
					PBXFileDataSource_Built_ColumnID,
					PBXFileDataSource_ObjectSize_ColumnID,
					PBXFileDataSource_Errors_ColumnID,
					PBXFileDataSource_Warnings_ColumnID,
					PBXFileDataSource_Target_ColumnID,
				);
			};
			PBXConfiguration.PBXTargetDataSource.PBXTargetDataSource = {
				PBXFileTableDataSourceColumnSortingDirectionKey = 1;
				PBXFileTableDataSourceColumnSortingKey = PBXTargetDataSource_PrimaryAttribute;
				PBXFileTableDataSourceColumnWidthsKey = (
					20,
					590,
					125,
					20,
					125,
					43,
					43,
				);
				PBXFileTableDataSourceColumnsKey = (
					PBXFileDataSource_FiletypeID,
					PBXFileDataSource_Filename_ColumnID,
					PBXTargetDataSource_PrimaryAttribute,
					PBXFileDataSource_Built_ColumnID,
					PBXFileDataSource_ObjectSize_ColumnID,
					PBXFileDataSource_Errors_ColumnID,
					PBXFileDataSource_Warnings_ColumnID,
				);
			};
			PBXPerProjectTemplateStateSaveDate = 139067258;
			PBXPrepackagedSmartGroups_v2 = (
				{
					PBXTransientLocationAtTop = bottom;
					absolutePathToBundle = "";
					activationKey = OldTargetSmartGroup;
					clz = PBXTargetSmartGroup;
					description = "Displays all targets of the project.";
					globalID = 1C37FABC04509CD000000102;
					name = Targets;
					preferences = {
						image = Targets;
					};
				},
				{
					PBXTransientLocationAtTop = bottom;
					absolutePathToBundle = "";
					clz = PBXTargetSmartGroup2;
					description = "Displays all targets of the project as well as nested build phases.";
					globalID = 1C37FBAC04509CD000000102;
					name = Targets;
					preferences = {
						image = Targets;
					};
				},
				{
					PBXTransientLocationAtTop = bottom;
					absolutePathToBundle = "";
					clz = PBXExecutablesSmartGroup;
					description = "Displays all executables of the project.";
					globalID = 1C37FAAC04509CD000000102;
					name = Executables;
					preferences = {
						image = Executable;
					};
				},
				{
					" PBXTransientLocationAtTop " = bottom;
					absolutePathToBundle = "";
					clz = PBXErrorsWarningsSmartGroup;
					description = "Displays files with errors or warnings.";
					globalID = 1C08E77C0454961000C914BD;
					name = "Errors and Warnings";
					preferences = {
						fnmatch = "";
						image = WarningsErrors;
						recursive = 1;
						regex = "";
						root = "<PROJECT>";
					};
				},
				{
					PBXTransientLocationAtTop = bottom;
					absolutePathToBundle = "";
					clz = PBXFilenameSmartGroup;
					description = "Filters items in a given group (potentially recursively) based on matching the name with the regular expression of the filter.";
					globalID = 1CC0EA4004350EF90044410B;
					name = "Implementation Files";
					preferences = {
						canSave = 1;
						fnmatch = "";
						image = SmartFolder;
						isLeaf = 0;
						recursive = 1;
						regex = "?*\\.[mcMC]";
						root = "<PROJECT>";
					};
				},
				{
					PBXTransientLocationAtTop = bottom;
					absolutePathToBundle = "";
					clz = PBXFilenameSmartGroup;
					description = "This group displays Interface Builder NIB Files.";
					globalID = 1CC0EA4004350EF90041110B;
					name = "NIB Files";
					preferences = {
						canSave = 1;
						fnmatch = "*.nib";
						image = SmartFolder;
						isLeaf = 0;
						recursive = 1;
						regex = "";
						root = "<PROJECT>";
					};
				},
				{
					PBXTransientLocationAtTop = no;
					absolutePathToBundle = "";
					clz = PBXFindSmartGroup;
					description = "Displays Find Results.";
					globalID = 1C37FABC05509CD000000102;
					name = "Find Results";
					preferences = {
						image = spyglass;
					};
				},
				{
					PBXTransientLocationAtTop = no;
					absolutePathToBundle = "";
					clz = PBXBookmarksSmartGroup;
					description = "Displays Project Bookmarks.";
					globalID = 1C37FABC05539CD112110102;
					name = Bookmarks;
					preferences = {
						image = Bookmarks;
					};
				},
				{
					PBXTransientLocationAtTop = bottom;
					absolutePathToBundle = "";
					clz = XCSCMSmartGroup;
					description = "Displays files with interesting SCM status.";
					globalID = E2644B35053B69B200211256;
					name = SCM;
					preferences = {
						image = PBXRepository;
						isLeaf = 0;
					};
				},
				{
					PBXTransientLocationAtTop = bottom;
					absolutePathToBundle = "";
					clz = PBXSymbolsSmartGroup;
					description = "Displays all symbols for the project.";
					globalID = 1C37FABC04509CD000100104;
					name = "Project Symbols";
					preferences = {
						image = ProjectSymbols;
						isLeaf = 1;
					};
				},
				{
					PBXTransientLocationAtTop = bottom;
					absolutePathToBundle = "";
					clz = PBXFilenameSmartGroup;
					description = "Filters items in a given group (potentially recursively) based on matching the name with the regular expression of the filter.";
					globalID = PBXTemplateMarker;
					name = "Simple Filter SmartGroup";
					preferences = {
						canSave = 1;
						fnmatch = "*.nib";
						image = SmartFolder;
						isLeaf = 0;
						recursive = 1;
						regex = "";
						root = "<PROJECT>";
					};
				},
				{
					PBXTransientLocationAtTop = bottom;
					absolutePathToBundle = "";
					clz = PBXFilenameSmartGroup;
					description = "Filters items in a given group (potentially recursively) based on matching the name with the regular expression of the filter.";
					globalID = PBXTemplateMarker;
					name = "Simple Regular Expression SmartGroup";
					preferences = {
						canSave = 1;
						fnmatch = "";
						image = SmartFolder;
						isLeaf = 0;
						recursive = 1;
						regex = "?*\\.[mcMC]";
						root = "<PROJECT>";
					};
				},
				{
					PBXTransientLocationAtTop = bottom;
					clz = XDDesignSmartGroup;
					description = "Displays Xdesign models";
					globalID = 2E4A936305E6979E00701470;
					name = Design;
					preferences = {
						image = Design;
						isLeaf = 0;
					};
				},
			);
			PBXWorkspaceContents = (
				{
					PBXProjectWorkspaceModule_StateKey_Rev39 = {
						PBXProjectWorkspaceModule_DataSourceSelectionKey_Rev6 = {
							BoundsStr = "{{0, 0}, {1083, 762}}";
							Rows = (
								0,
							);
							VisibleRectStr = "{{0, 0}, {1083, 762}}";
						};
						PBXProjectWorkspaceModule_EditorOpen = false;
						PBXProjectWorkspaceModule_EmbeddedNavigatorGroup = {
							PBXSplitModuleInNavigatorKey = {
								SplitCount = 1;
							};
						};
						PBXProjectWorkspaceModule_GeometryKey_Rev15 = {
							PBXProjectWorkspaceModule_SGTM_Geometry = {
								_collapsingFrameDimension = 0;
								_indexOfCollapsedView = 0;
								_percentageOfCollapsedView = 0;
								sizes = (
									"{{0, 0}, {182, 779}}",
									"{{182, 0}, {1098, 779}}",
								);
							};
						};
						PBXProjectWorkspaceModule_OldDetailFrame = "{{0, 0}, {1098, 779}}";
						PBXProjectWorkspaceModule_OldEditorFrame = "{{0, 0}, {750, 480}}";
						PBXProjectWorkspaceModule_OldSuperviewFrame = "{{182, 0}, {1098, 779}}";
						PBXProjectWorkspaceModule_SGTM = {
							PBXBottomSmartGroupGIDs = (
								1C37FBAC04509CD000000102,
								1C37FAAC04509CD000000102,
								1C08E77C0454961000C914BD,
								1CC0EA4004350EF90044410B,
								1CC0EA4004350EF90041110B,
								1C37FABC05509CD000000102,
								1C37FABC05539CD112110102,
								E2644B35053B69B200211256,
								1C37FABC04509CD000100104,
							);
							PBXSmartGroupTreeModuleColumnData = {
								PBXSmartGroupTreeModuleColumnWidthsKey = (
									165,
								);
								PBXSmartGroupTreeModuleColumnsKey_v4 = (
									MainColumn,
								);
							};
							PBXSmartGroupTreeModuleOutlineStateKey_v7 = {
								PBXSmartGroupTreeModuleOutlineStateExpansionKey = (
									1C37FBAC04509CD000000102,
									4E45F9A9070DDB1D001B6525,
									4E45F9CE070DDDB2001B6525,
									1C37FAAC04509CD000000102,
								);
								PBXSmartGroupTreeModuleOutlineStateSelectionKey = (
									(
										10,
										9,
									),
								);
								PBXSmartGroupTreeModuleOutlineStateVisibleRectKey = "{{0, 0}, {165, 761}}";
							};
							PBXTopSmartGroupGIDs = (
							);
						};
					};
				},
			);
			"PBXWorkspaceContents:PBXConfiguration.PBXModule.PBXBuildResultsModule" = {
			};
			"PBXWorkspaceContents:PBXConfiguration.PBXModule.PBXDebugCLIModule" = {
			};
			"PBXWorkspaceContents:PBXConfiguration.PBXModule.PBXNavigatorGroup" = {
				PBXSplitModuleInNavigatorKey = {
					SplitCount = 1;
				};
			};
			"PBXWorkspaceContents:PBXConfiguration.PBXModule.PBXProjectWorkspaceModule" = {
				PBXProjectWorkspaceModule_StateKey_Rev39 = {
					PBXProjectWorkspaceModule_DataSourceSelectionKey_Rev6 = {
						BoundsStr = "{{0, 0}, {1083, 762}}";
						Rows = (
							0,
						);
						VisibleRectStr = "{{0, 0}, {1083, 762}}";
					};
					PBXProjectWorkspaceModule_EditorOpen = false;
					PBXProjectWorkspaceModule_EmbeddedNavigatorGroup = {
						PBXSplitModuleInNavigatorKey = {
							SplitCount = 1;
						};
					};
					PBXProjectWorkspaceModule_GeometryKey_Rev15 = {
						PBXProjectWorkspaceModule_SGTM_Geometry = {
							_collapsingFrameDimension = 0;
							_indexOfCollapsedView = 0;
							_percentageOfCollapsedView = 0;
							sizes = (
								"{{0, 0}, {182, 779}}",
								"{{182, 0}, {1098, 779}}",
							);
						};
					};
					PBXProjectWorkspaceModule_OldDetailFrame = "{{0, 0}, {1098, 779}}";
					PBXProjectWorkspaceModule_OldEditorFrame = "{{0, 0}, {750, 480}}";
					PBXProjectWorkspaceModule_OldSuperviewFrame = "{{182, 0}, {1098, 779}}";
					PBXProjectWorkspaceModule_SGTM = {
						PBXBottomSmartGroupGIDs = (
							1C37FBAC04509CD000000102,
							1C37FAAC04509CD000000102,
							1C08E77C0454961000C914BD,
							1CC0EA4004350EF90044410B,
							1CC0EA4004350EF90041110B,
							1C37FABC05509CD000000102,
							1C37FABC05539CD112110102,
							E2644B35053B69B200211256,
							1C37FABC04509CD000100104,
						);
						PBXSmartGroupTreeModuleColumnData = {
							PBXSmartGroupTreeModuleColumnWidthsKey = (
								165,
							);
							PBXSmartGroupTreeModuleColumnsKey_v4 = (
								MainColumn,
							);
						};
						PBXSmartGroupTreeModuleOutlineStateKey_v7 = {
							PBXSmartGroupTreeModuleOutlineStateExpansionKey = (
							);
							PBXSmartGroupTreeModuleOutlineStateSelectionKey = (
								(
									0,
								),
							);
							PBXSmartGroupTreeModuleOutlineStateVisibleRectKey = "{{0, 0}, {165, 761}}";
						};
						PBXTopSmartGroupGIDs = (
						);
					};
				};
			};
			PBXWorkspaceGeometries = (
				{
					Frame = "{{0, 0}, {1280, 779}}";
					PBXProjectWorkspaceModule_GeometryKey_Rev15 = {
					};
					RubberWindowFrame = "0 117 1280 821 0 0 1280 938 ";
				},
			);
			"PBXWorkspaceGeometries:PBXConfiguration.PBXModule.PBXBuildResultsModule" = {
				Frame = "{{0, 0}, {480, 217}}";
				PBXModuleWindowStatusBarHidden = YES;
				RubberWindowFrame = "400 560 480 238 0 0 1280 938 ";
			};
			"PBXWorkspaceGeometries:PBXConfiguration.PBXModule.PBXDebugCLIModule" = {
				Frame = "{{0, 0}, {400, 201}}";
				PBXModuleWindowStatusBarHidden = YES;
				RubberWindowFrame = "50 910 400 222 0 0 1280 938 ";
			};
			"PBXWorkspaceGeometries:PBXConfiguration.PBXModule.PBXNavigatorGroup" = {
				Frame = "{{0, 0}, {750, 481}}";
				PBXModuleWindowStatusBarHidden = YES;
				RubberWindowFrame = "38 410 750 502 0 0 1280 938 ";
			};
			"PBXWorkspaceGeometries:PBXConfiguration.PBXModule.PBXProjectWorkspaceModule" = {
				Frame = "{{0, 0}, {1280, 779}}";
				PBXProjectWorkspaceModule_GeometryKey_Rev15 = {
				};
				RubberWindowFrame = "0 117 1280 821 0 0 1280 938 ";
			};
			PBXWorkspaceStateSaveDate = 139067258;
		};
		perUserProjectItems = {
			4E293175082DF27B004AD73C = 4E293175082DF27B004AD73C;
			4E293288082E50BD004AD73C = 4E293288082E50BD004AD73C;
			4E29328C082E50BD004AD73C = 4E29328C082E50BD004AD73C;
			4E29328E082E50BD004AD73C = 4E29328E082E50BD004AD73C;
			4E2932B3082E5ABD004AD73C = 4E2932B3082E5ABD004AD73C;
			4E2932F5082E639A004AD73C = 4E2932F5082E639A004AD73C;
			4E29332B082E67D9004AD73C = 4E29332B082E67D9004AD73C;
			4E5470A80832A04100CA0375 = 4E5470A80832A04100CA0375;
			4E5471090832A94F00CA0375 = 4E5471090832A94F00CA0375;
			4E5471280832AB8400CA0375 = 4E5471280832AB8400CA0375;
			4E6A5CA0082EA09E00ED6FD8 = 4E6A5CA0082EA09E00ED6FD8;
			4E6A5CA3082EA09E00ED6FD8 = 4E6A5CA3082EA09E00ED6FD8;
			4E6A5CA5082EA12700ED6FD8 = 4E6A5CA5082EA12700ED6FD8;
			4E6A5CA8082EA12700ED6FD8 = 4E6A5CA8082EA12700ED6FD8;
			4E6A5CBD082EA20000ED6FD8 = 4E6A5CBD082EA20000ED6FD8;
			4E6A5CC3082EA20000ED6FD8 = 4E6A5CC3082EA20000ED6FD8;
			4E6EA357083E94B9004C5D07 = 4E6EA357083E94B9004C5D07;
			4E6EA35C083E94D1004C5D07 = 4E6EA35C083E94D1004C5D07;
			4E6EA368083E95DE004C5D07 = 4E6EA368083E95DE004C5D07;
			4E6EA37C083E96CF004C5D07 = 4E6EA37C083E96CF004C5D07;
			4E6EA38C083E98CA004C5D07 = 4E6EA38C083E98CA004C5D07;
			4E6EA38D083E98CA004C5D07 = 4E6EA38D083E98CA004C5D07;
			4E6EA390083E98CA004C5D07 = 4E6EA390083E98CA004C5D07;
			4E6EA3BC083E9AD7004C5D07 = 4E6EA3BC083E9AD7004C5D07;
			4E6EA3DD083E9C1C004C5D07 = 4E6EA3DD083E9C1C004C5D07;
			4E6EA3F2083E9D6A004C5D07 = 4E6EA3F2083E9D6A004C5D07;
			4E6EA3F3083E9D6A004C5D07 = 4E6EA3F3083E9D6A004C5D07;
			4E6F4839082D024B007CC678 = 4E6F4839082D024B007CC678;
			4E751588082C0D65002018A8 = 4E751588082C0D65002018A8;
			4E8A26AA0838C11700216481 = 4E8A26AA0838C11700216481;
			4E8A26AB0838C11700216481 = 4E8A26AB0838C11700216481;
			4E8A275A0838E1AC00216481 = 4E8A275A0838E1AC00216481;
			4E8A275B0838E1AC00216481 = 4E8A275B0838E1AC00216481;
			4E8A27600838E1FB00216481 = 4E8A27600838E1FB00216481;
			4E8A27670838E2CF00216481 = 4E8A27670838E2CF00216481;
			4E8E5733083E39DC0061697E = 4E8E5733083E39DC0061697E;
			4E8E578B083E4CA60061697E = 4E8E578B083E4CA60061697E;
			4E8E5792083E4CA60061697E = 4E8E5792083E4CA60061697E;
			4E98AA8E084A0B0E0002D4FC = 4E98AA8E084A0B0E0002D4FC;
			4E98AA90084A0B0E0002D4FC = 4E98AA90084A0B0E0002D4FC;
			4E98AA93084A0B0E0002D4FC = 4E98AA93084A0B0E0002D4FC;
			4E98AA94084A0B0E0002D4FC = 4E98AA94084A0B0E0002D4FC;
			4E98AA95084A0B0E0002D4FC = 4E98AA95084A0B0E0002D4FC;
			4E98AA96084A0B0E0002D4FC = 4E98AA96084A0B0E0002D4FC;
			4E98AA9E084A0B6C0002D4FC = 4E98AA9E084A0B6C0002D4FC;
			4E98AA9F084A0B6C0002D4FC = 4E98AA9F084A0B6C0002D4FC;
			4E98AAA3084A0BD70002D4FC = 4E98AAA3084A0BD70002D4FC;
			4E98AAA5084A0BD70002D4FC = 4E98AAA5084A0BD70002D4FC;
			4E98AAA9084A1DA60002D4FC = 4E98AAA9084A1DA60002D4FC;
			4E98AAAC084A1DA60002D4FC = 4E98AAAC084A1DA60002D4FC;
			4E98AAAE084A1DA60002D4FC = 4E98AAAE084A1DA60002D4FC;
			4E98AAAF084A1DA60002D4FC = 4E98AAAF084A1DA60002D4FC;
			4E98AAB1084A1DA60002D4FC = 4E98AAB1084A1DA60002D4FC;
			4E98AAB3084A1DA60002D4FC = 4E98AAB3084A1DA60002D4FC;
			4E98AAB8084A1ECA0002D4FC = 4E98AAB8084A1ECA0002D4FC;
			4E98AAC2084A23820002D4FC = 4E98AAC2084A23820002D4FC;
			4E98AAC3084A23820002D4FC = 4E98AAC3084A23820002D4FC;
			4E98AAC4084A23820002D4FC = 4E98AAC4084A23820002D4FC;
			4E98AAC8084A23B10002D4FC = 4E98AAC8084A23B10002D4FC;
			4E98AACD084A24CE0002D4FC = 4E98AACD084A24CE0002D4FC;
			4E98AAD0084A24CE0002D4FC = 4E98AAD0084A24CE0002D4FC;
			4E98AAD3084A25250002D4FC = 4E98AAD3084A25250002D4FC;
			4E98AAD5084A25250002D4FC = 4E98AAD5084A25250002D4FC;
			4E98AADB084A25B00002D4FC = 4E98AADB084A25B00002D4FC;
			4E98AADC084A25B00002D4FC = 4E98AADC084A25B00002D4FC;
			4E98AAE0084A26310002D4FC = 4E98AAE0084A26310002D4FC;
			4E98AAE8084A26E40002D4FC = 4E98AAE8084A26E40002D4FC;
			4E98AAEC084A274D0002D4FC = 4E98AAEC084A274D0002D4FC;
			4E98AAF2084A2BD20002D4FC = 4E98AAF2084A2BD20002D4FC;
			4E98AAF4084A2BD20002D4FC = 4E98AAF4084A2BD20002D4FC;
			4E98AAF6084A32C30002D4FC = 4E98AAF6084A32C30002D4FC;
			4E98AAF8084A32C30002D4FC = 4E98AAF8084A32C30002D4FC;
			4E98AAFA084A32C30002D4FC = 4E98AAFA084A32C30002D4FC;
			4E98AAFB084A32C30002D4FC = 4E98AAFB084A32C30002D4FC;
			4E98AAFC084A32C30002D4FC = 4E98AAFC084A32C30002D4FC;
			4E98AAFF084A33900002D4FC = 4E98AAFF084A33900002D4FC;
			4E98AB01084A33900002D4FC = 4E98AB01084A33900002D4FC;
			4E98AB04084A692F0002D4FC = 4E98AB04084A692F0002D4FC;
			4E98AB05084A692F0002D4FC = 4E98AB05084A692F0002D4FC;
			4E98AB06084A692F0002D4FC = 4E98AB06084A692F0002D4FC;
			4E98AB07084A692F0002D4FC = 4E98AB07084A692F0002D4FC;
			4E98AB0D084A696B0002D4FC = 4E98AB0D084A696B0002D4FC;
			4EAD68CA083BC5A900C61F13 = 4EAD68CA083BC5A900C61F13;
			4EAD68CE083BC5A900C61F13 = 4EAD68CE083BC5A900C61F13;
			4EAD690B083BC7E000C61F13 = 4EAD690B083BC7E000C61F13;
			4EAD6913083BC8A700C61F13 = 4EAD6913083BC8A700C61F13;
			4EAD6954083BD14300C61F13 = 4EAD6954083BD14300C61F13;
			4EAD6969083BD39C00C61F13 = 4EAD6969083BD39C00C61F13;
			4EAD696A083BD39C00C61F13 = 4EAD696A083BD39C00C61F13;
			4EAD69A3083BE08000C61F13 = 4EAD69A3083BE08000C61F13;
			4EAD69B6083BE11400C61F13 = 4EAD69B6083BE11400C61F13;
			4EAD69BC083BE16100C61F13 = 4EAD69BC083BE16100C61F13;
			4EAD69C0083BE6C300C61F13 = 4EAD69C0083BE6C300C61F13;
			4EAD69CB083BE6CE00C61F13 = 4EAD69CB083BE6CE00C61F13;
			4EAD69EE083BFCC000C61F13 = 4EAD69EE083BFCC000C61F13;
			4EAD69EF083BFCC000C61F13 = 4EAD69EF083BFCC000C61F13;
			4EB6E460082FF18D003AAA48 = 4EB6E460082FF18D003AAA48;
			4EB6E463082FF18D003AAA48 = 4EB6E463082FF18D003AAA48;
			4EB6E510083143AE003AAA48 = 4EB6E510083143AE003AAA48;
			4ECA774C08322F6D008ADA24 = 4ECA774C08322F6D008ADA24;
			4ECC02D007E2065C007D664C = 4ECC02D007E2065C007D664C;
			4ED51032083E62E400BC1579 = 4ED51032083E62E400BC1579;
			4ED51052083E64DE00BC1579 = 4ED51052083E64DE00BC1579;
			4ED51053083E64DE00BC1579 = 4ED51053083E64DE00BC1579;
			4EDEC4EB07CE349A00514E5A = 4EDEC4EB07CE349A00514E5A;
		};
		sourceControlManager = 4E25C4AB070DDADD0005BF02;
		userBuildSettings = {
		};
	};
	4E02C48E082F816D00EC0863 = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {898, 2415}}";
			sepNavSelRange = "{1427, 0}";
			sepNavVisRect = "{{0, 1104}, {898, 576}}";
		};
	};
	4E0887C1071585CD005706CD = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {943, 437}}";
			sepNavSelRange = "{0, 0}";
			sepNavVisRect = "{{0, 0}, {943, 437}}";
		};
	};
	4E13CA0B07EB1770003D3B6C = {
		isa = PBXFileReference;
		lastKnownFileType = sourcecode.c.h;
		name = fftw3.h;
		path = /sw/include/fftw3.h;
		refType = 0;
		sourceTree = "<absolute>";
	};
	4E25C4AB070DDADD0005BF02 = {
		fallbackIsa = XCSourceControlManager;
		isSCMEnabled = 0;
		isa = PBXSourceControlManager;
		scmConfiguration = {
		};
		scmType = scm.subversion;
	};
	4E25C4AC070DDADD0005BF02 = {
		indexTemplatePath = "";
		isa = PBXCodeSenseManager;
		usesDefaults = 1;
		wantsCodeCompletion = 1;
		wantsCodeCompletionAutoSuggestions = 0;
		wantsCodeCompletionCaseSensitivity = 1;
		wantsCodeCompletionListAlways = 1;
		wantsCodeCompletionOnlyMatchingItems = 1;
		wantsCodeCompletionParametersIncluded = 1;
		wantsCodeCompletionPlaceholdersInserted = 1;
		wantsCodeCompletionTabCompletes = 1;
		wantsIndex = 1;
	};
	4E293175082DF27B004AD73C = {
		fRef = 4E751580082C0CF4002018A8;
		isa = PBXTextBookmark;
		name = "u.c: 347";
		rLen = 0;
		rLoc = 13460;
		rType = 0;
		vrLen = 797;
		vrLoc = 11213;
	};
	4E293281082E501F004AD73C = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {961, 470}}";
			sepNavSelRange = "{633, 0}";
			sepNavVisRect = "{{0, 0}, {961, 470}}";
		};
	};
	4E293282082E501F004AD73C = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {1233, 9807}}";
			sepNavSelRange = "{5165, 0}";
			sepNavVisRect = "{{0, 2564}, {1233, 233}}";
		};
	};
	4E293288082E50BD004AD73C = {
		fRef = 4E6E40C2082CB46F00642FF0;
		isa = PBXTextBookmark;
		name = "/** inverse nfft \n * -----------------------------------------------------------------------------\n * -----------------------------------------------------------------------------\n */\nvoid infft_init_specific(infft_plan *this_iplan, nfft_plan *direct_plan,\n\t\t\t int infft_flags)\n{\n  this_iplan->direct_plan = direct_plan;\n  this_iplan->infft_flags = infft_flags;\n  \n  this_iplan->given_f = (fftw_complex*)\n    fftw_malloc(this_iplan->direct_plan->M*sizeof(fftw_complex));\n\n  this_iplan->r_iter = (fftw_complex*)\n    fftw_malloc(this_iplan->direct_plan->M*sizeof(fftw_complex));\n\n  this_iplan->f_hat_iter = (fftw_complex*)\n    fftw_malloc(this_iplan->direct_plan->N_L*sizeof(fftw_complex));\n\n  this_iplan->p_hat_iter = (fftw_complex*)\n    fftw_malloc(this_iplan->direct_plan->N_L*sizeof(fftw_complex));\n\n  if(this_iplan->infft_flags & LANDWEBER)\n    {\n      this_iplan->z_hat_iter = this_iplan->p_hat_iter;\n    }\n\n  if(this_iplan->infft_flags & STEEPEST_DESCENT)\n    {\n      this_iplan->z_hat_iter = this_iplan->p_hat_iter;\n\n      this_iplan->v_iter = (fftw_complex*)\n\tfftw_malloc(this_iplan->direct_plan->M*sizeof(fftw_complex));\n    }\n\n  if(this_iplan->infft_flags & CGNR_E)\n    {\n      this_iplan->z_hat_iter = (fftw_complex*)\n\tfftw_malloc(this_iplan->direct_plan->N_L*sizeof(fftw_complex));\n\n      this_iplan->v_iter = (fftw_complex*)\n\tfftw_malloc(this_iplan->direct_plan->M*sizeof(fftw_complex));\n    }\n\n  if(this_iplan->infft_flags & CGNE_R)\n    {\n      this_iplan->z_hat_iter = this_iplan->p_hat_iter;\n    }\n\n  if(this_iplan->infft_flags & ITERATE_2nd)\n    this_iplan->f_hat_iter_2nd = (fftw_complex*) \n      fftw_malloc(this_iplan->direct_plan->N_L*sizeof(fftw_complex));\n\n  if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n    this_iplan->w = \n      (double*) fftw_malloc(this_iplan->direct_plan->M*sizeof(double));\n  \n  if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n    this_iplan->w_hat = \n      (double*) fftw_malloc(this_iplan->direct_plan->N_L*sizeof(double));\n}\n\nvoid infft_init(infft_plan *this_iplan, nfft_plan *direct_plan)\n{\n  infft_init_specific(this_iplan, direct_plan, CGNR_E);\n}\n\nvoid infft_before_loop_help(infft_plan *this_iplan)\n{\n  /** step 2\n   *  overwrites this_iplan->direct_plan->f_hat \n   *  overwrites this_iplan->r_iter\n   */\n  copyc(this_iplan->direct_plan->f_hat, this_iplan->f_hat_iter,\n\tthis_iplan->direct_plan->N_L);\n  \n  SWAPC(this_iplan->r_iter, this_iplan->direct_plan->f);\n  nfft_trafo(this_iplan->direct_plan);\n  SWAPC(this_iplan->r_iter, this_iplan->direct_plan->f);\n\n  updatec_axpy(this_iplan->r_iter, -1.0, this_iplan->given_f,\n\t       this_iplan->direct_plan->M);\n\n  if((!(this_iplan->infft_flags & LANDWEBER)) ||\n     (this_iplan->infft_flags & NORMS_FOR_LANDWEBER))\n    {\n      if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n\tthis_iplan->dot_r_iter =\n\t  dotproductc_w(this_iplan->r_iter, this_iplan->w,\n\t\t\tthis_iplan->direct_plan->M);\n      else\n\tthis_iplan->dot_r_iter =\n\t  dotproductc(this_iplan->r_iter, this_iplan->direct_plan->M);\n    }\n  \n  /** step 3\n   *  overwrites this_iplan->direct_plan->f\n   *  overwrites this_iplan->z_hat_iter resp. this_iplan->z_hat_iter\n   */ \n\n  if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n    copyc_w(this_iplan->direct_plan->f, this_iplan->w, this_iplan->r_iter,\n\t    this_iplan->direct_plan->M);\n  else\n    copyc(this_iplan->direct_plan->f, this_iplan->r_iter,\n\t  this_iplan->direct_plan->M);\n  \n  SWAPC(this_iplan->z_hat_iter, this_iplan->direct_plan->f_hat);\n  nfft_adjoint(this_iplan->direct_plan);\n  SWAPC(this_iplan->z_hat_iter, this_iplan->direct_plan->f_hat);\n  \n  if((!(this_iplan->infft_flags & LANDWEBER)) ||\n     (this_iplan->infft_flags & NORMS_FOR_LANDWEBER))\n    {\n      if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n\tthis_iplan->dot_z_hat_iter = \n\t  dotproductc_w(this_iplan->z_hat_iter, this_iplan->w_hat,\n\t\t\tthis_iplan->direct_plan->N_L);\n      else\n\tthis_iplan->dot_z_hat_iter =\n\t  dotproductc(this_iplan->z_hat_iter, this_iplan->direct_plan->N_L);\n    }\n\n  if(this_iplan->infft_flags & CGNE_R)\n    this_iplan->dot_p_hat_iter = this_iplan->dot_z_hat_iter;\n\n} /* void infft_before_loop_help */\n\nvoid infft_before_loop(infft_plan *this_iplan)\n{\n  infft_before_loop_help(this_iplan);\n\n  if(this_iplan->infft_flags & CGNR_E)\n    {\n      /** step 4-6\n       *  overwrites this_iplan->f_hat_iter_2nd\n       */\n      if(this_iplan->infft_flags & ITERATE_2nd)\n\tcopyc(this_iplan->f_hat_iter_2nd, this_iplan->f_hat_iter,\n\t      this_iplan->direct_plan->N_L);\n     \n      /** step 7\n       *  overwrites this_iplan->p_hat_iter\n       */\n      copyc(this_iplan->p_hat_iter, this_iplan->z_hat_iter,\n\t    this_iplan->direct_plan->N_L);\n    }\n\n  if(this_iplan->infft_flags & CGNE_R)\n    {\n      /** step 4-7\n       *  overwrites this_iplan->f_hat_iter_2nd\n       */\n      if(this_iplan->infft_flags & ITERATE_2nd)\n\t{\n\t  this_iplan->gamma_iter=1.0;\n\t  copyc(this_iplan->f_hat_iter_2nd, this_iplan->f_hat_iter,\n\t\tthis_iplan->direct_plan->N_L);\n\t}\n    }\n} /* void infft_before_loop */\n\nvoid infft_loop_one_step_landweber(infft_plan *this_iplan)\n{\n  /** step 5\n   *  updates this_iplan->f_hat_iter\n   */\n  if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n    updatec_xpawy(this_iplan->f_hat_iter, this_iplan->alpha_iter,\n\t\t  this_iplan->w_hat, this_iplan->z_hat_iter,\n\t\t  this_iplan->direct_plan->N_L);\n  else\n    updatec_xpay(this_iplan->f_hat_iter, this_iplan->alpha_iter,\n\t\tthis_iplan->z_hat_iter, this_iplan->direct_plan->N_L);\n  \n  /** step 6\n   *  original residual, not the updated residual,\n   *  overwrites this_iplan->r_iter\n   *  overwrites this_iplan->direct_plan->f_hat \n   */\n  copyc(this_iplan->direct_plan->f_hat, this_iplan->f_hat_iter,\n\tthis_iplan->direct_plan->N_L);\n\n  SWAPC(this_iplan->r_iter,this_iplan->direct_plan->f);\n  nfft_trafo(this_iplan->direct_plan);\n  SWAPC(this_iplan->r_iter,this_iplan->direct_plan->f);\n  \n  updatec_axpy(this_iplan->r_iter, -1.0, this_iplan->given_f, \n\t       this_iplan->direct_plan->M);\n\n  if(this_iplan->infft_flags & NORMS_FOR_LANDWEBER)\n    {\n      if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n\tthis_iplan->dot_r_iter = dotproductc_w(this_iplan->r_iter,this_iplan->w,\n\t\t\t\t\t       this_iplan->direct_plan->M);\n      else\n\tthis_iplan->dot_r_iter =\n\t  dotproductc(this_iplan->r_iter, this_iplan->direct_plan->M);\n    }\n\n  /** step 7\n   *  overwrites this_iplan->direct_plan->f \n   *  overwrites this_iplan->z_hat_iter\n   */\n  if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n    copyc_w(this_iplan->direct_plan->f, this_iplan->w,\n\t    this_iplan->r_iter, this_iplan->direct_plan->M);\n  else\n    copyc(this_iplan->direct_plan->f, this_iplan->r_iter,\n\t  this_iplan->direct_plan->M);\n    \n  SWAPC(this_iplan->z_hat_iter,this_iplan->direct_plan->f_hat);\n  nfft_adjoint(this_iplan->direct_plan);\n  SWAPC(this_iplan->z_hat_iter,this_iplan->direct_plan->f_hat);\n\n  if(this_iplan->infft_flags & NORMS_FOR_LANDWEBER)\n    {\n      if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n\tthis_iplan->dot_z_hat_iter = \n\t  dotproductc_w(this_iplan->z_hat_iter, this_iplan->w_hat,\n\t\t\tthis_iplan->direct_plan->N_L);\n      else\n\tthis_iplan->dot_z_hat_iter =\n\t  dotproductc(this_iplan->z_hat_iter, this_iplan->direct_plan->N_L);\n    }\n} /* void infft_loop_one_step_landweber */\n\nvoid infft_loop_one_step_steepest_descent(infft_plan *this_iplan)\n{\n  /** step 5\n   *  overwrites this_iplan->direct_plan->f_hat \n   *  overwrites this_iplan->v_iter\n   */\n  if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n    copyc_w(this_iplan->direct_plan->f_hat, this_iplan->w_hat,\n\t    this_iplan->z_hat_iter, this_iplan->direct_plan->N_L);\n  else\n    copyc(this_iplan->direct_plan->f_hat, this_iplan->z_hat_iter,\n\t  this_iplan->direct_plan->N_L);\n  \n  SWAPC(this_iplan->v_iter,this_iplan->direct_plan->f);\n  nfft_trafo(this_iplan->direct_plan);\n  SWAPC(this_iplan->v_iter,this_iplan->direct_plan->f);\n  \n  if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n    this_iplan->dot_v_iter = dotproductc_w(this_iplan->v_iter, this_iplan->w,\n\t\t\t\t\t   this_iplan->direct_plan->M);\n  else\n    this_iplan->dot_v_iter =\n      dotproductc(this_iplan->v_iter, this_iplan->direct_plan->M);\n  \n  /** step 6\n   */\n  this_iplan->alpha_iter =\n    this_iplan->dot_z_hat_iter / this_iplan->dot_v_iter;\n\n  /** step 7\n   *  updates this_iplan->f_hat_iter\n   */\n  if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n    updatec_xpawy(this_iplan->f_hat_iter, this_iplan->alpha_iter,\n\t\t  this_iplan->w_hat,this_iplan->z_hat_iter,\n\t\t  this_iplan->direct_plan->N_L);\n  else\n    updatec_xpay(this_iplan->f_hat_iter, this_iplan->alpha_iter,\n\t\tthis_iplan->z_hat_iter, this_iplan->direct_plan->N_L);\n\n  /** step 8\n   *  updates this_iplan->r_iter\n   */\n  updatec_xpay(this_iplan->r_iter, -this_iplan->alpha_iter, this_iplan->v_iter,\n\t      this_iplan->direct_plan->M);\n\n  if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n    this_iplan->dot_r_iter = dotproductc_w(this_iplan->r_iter, this_iplan->w,\n\t\t\t\t\t   this_iplan->direct_plan->M);\n  else\n    this_iplan->dot_r_iter =\n      dotproductc(this_iplan->r_iter, this_iplan->direct_plan->M);\n\n  /** step 9\n   *  overwrites this_iplan->direct_plan->f\n   *  overwrites this_iplan->z_hat_iter\n   */\n  if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n    copyc_w(this_iplan->direct_plan->f, this_iplan->w, this_iplan->r_iter,\n\t    this_iplan->direct_plan->M);\n  else\n    copyc(this_iplan->direct_plan->f, this_iplan->r_iter,\n\t  this_iplan->direct_plan->M);\n  \n  SWAPC(this_iplan->z_hat_iter,this_iplan->direct_plan->f_hat);\n  nfft_adjoint(this_iplan->direct_plan);\n  SWAPC(this_iplan->z_hat_iter,this_iplan->direct_plan->f_hat);\n  \n  if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n    this_iplan->dot_z_hat_iter =\n      dotproductc_w(this_iplan->z_hat_iter, this_iplan->w_hat, \n\t\t    this_iplan->direct_plan->N_L);\n  else\n    this_iplan->dot_z_hat_iter =\n      dotproductc(this_iplan->z_hat_iter, this_iplan->direct_plan->N_L);\n} /* void infft_loop_one_step_steepest_descent */\n\nvoid infft_loop_one_step_cgnr_e(infft_plan *this_iplan)\n{\n  /** step 9\n   *  overwrites this_iplan->direct_plan->f_hat \n   *  overwrites this_iplan->v_iter\n   */\n  if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n    copyc_w(this_iplan->direct_plan->f_hat, this_iplan->w_hat,\n\t    this_iplan->p_hat_iter, this_iplan->direct_plan->N_L);\n  else\n    copyc(this_iplan->direct_plan->f_hat, this_iplan->p_hat_iter,\n\t  this_iplan->direct_plan->N_L);\n  \n  SWAPC(this_iplan->v_iter,this_iplan->direct_plan->f);\n  nfft_trafo(this_iplan->direct_plan);\n  SWAPC(this_iplan->v_iter,this_iplan->direct_plan->f);\n  \n  if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n    this_iplan->dot_v_iter = dotproductc_w(this_iplan->v_iter, this_iplan->w,\n\t\t\t\t\t   this_iplan->direct_plan->M);\n  else\n    this_iplan->dot_v_iter =\n      dotproductc(this_iplan->v_iter, this_iplan->direct_plan->M);\n  \n  /** step 10\n   */\n  this_iplan->alpha_iter =\n    this_iplan->dot_z_hat_iter / this_iplan->dot_v_iter;\n\n  /** step 11\n   *  updates this_iplan->f_hat_iter\n   */\n  if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n    updatec_xpawy(this_iplan->f_hat_iter, this_iplan->alpha_iter,\n\t\t  this_iplan->w_hat, this_iplan->p_hat_iter,\n\t\t  this_iplan->direct_plan->N_L);\n  else\n    updatec_xpay(this_iplan->f_hat_iter, this_iplan->alpha_iter, \n\t\tthis_iplan->p_hat_iter, this_iplan->direct_plan->N_L);\n\n  /** step 12-15\n   *  updates this_iplan->f_hat_iter_2nd\n   */\n  if(this_iplan->infft_flags & ITERATE_2nd)\n    {\n      this_iplan->alpha_iter_2nd =\n\tthis_iplan->dot_r_iter / this_iplan->dot_z_hat_iter;\n      \n      if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n\tupdatec_xpawy(this_iplan->f_hat_iter_2nd, this_iplan->alpha_iter_2nd,\n\t\t      this_iplan->w_hat, this_iplan->z_hat_iter,\n\t\t      this_iplan->direct_plan->N_L);\n      else\n\tupdatec_xpay(this_iplan->f_hat_iter_2nd, this_iplan->alpha_iter_2nd,\n\t\t    this_iplan->z_hat_iter, this_iplan->direct_plan->N_L);\n    }\n  \n  /** step 16\n   *  updates this_iplan->r_iter\n   */\n  updatec_xpay(this_iplan->r_iter, -this_iplan->alpha_iter, this_iplan->v_iter,\n\t      this_iplan->direct_plan->M);\n  \n  if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n    this_iplan->dot_r_iter = dotproductc_w(this_iplan->r_iter, this_iplan->w,\n\t\t\t\t\t   this_iplan->direct_plan->M);\n  else\n    this_iplan->dot_r_iter =\n      dotproductc(this_iplan->r_iter, this_iplan->direct_plan->M);\n\n  /** step 17\n   *  overwrites this_iplan->direct_plan->f\n   *  overwrites this_iplan->direct_plan->r_iter\n   */\n  if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n    copyc_w(this_iplan->direct_plan->f, this_iplan->w, \n\t    this_iplan->r_iter, this_iplan->direct_plan->M);\n  else\n    copyc(this_iplan->direct_plan->f, this_iplan->r_iter,\n\t  this_iplan->direct_plan->M);\n  \n  SWAPC(this_iplan->z_hat_iter,this_iplan->direct_plan->f_hat);\n  nfft_adjoint(this_iplan->direct_plan);\n  SWAPC(this_iplan->z_hat_iter,this_iplan->direct_plan->f_hat);\n\n  this_iplan->dot_z_hat_iter_old = this_iplan->dot_z_hat_iter;\n  if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n    this_iplan->dot_z_hat_iter =\n      dotproductc_w(this_iplan->z_hat_iter, this_iplan->w_hat, \n\t\t    this_iplan->direct_plan->N_L);\n  else\n    this_iplan->dot_z_hat_iter =\n      dotproductc(this_iplan->z_hat_iter, this_iplan->direct_plan->N_L);\n  \n  /** step 18\n   */\n  this_iplan->beta_iter =\n    this_iplan->dot_z_hat_iter / this_iplan->dot_z_hat_iter_old;\n  \n  /** step 19\n   *  updates this_iplan->p_hat_iter\n   */\n  updatec_axpy(this_iplan->p_hat_iter, this_iplan->beta_iter, \n\t       this_iplan->z_hat_iter, this_iplan->direct_plan->N_L);\n} /* void infft_loop_one_step_cgnr_e */\n\nvoid infft_loop_one_step_cgne_r(infft_plan *this_iplan)\n{\n  /** step 9\n   */\n  this_iplan->alpha_iter =\n    this_iplan->dot_r_iter / this_iplan->dot_p_hat_iter;\n  \n  /** step 10\n   *  updates this_iplan->f_hat_iter\n   */\n  if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n    updatec_xpawy(this_iplan->f_hat_iter, this_iplan->alpha_iter,\n\t\t  this_iplan->w_hat, this_iplan->p_hat_iter,\n\t\t  this_iplan->direct_plan->N_L);\n  else\n    updatec_xpay(this_iplan->f_hat_iter, this_iplan->alpha_iter,\n\t\tthis_iplan->p_hat_iter, this_iplan->direct_plan->N_L);\n  \n  /** step 11\n   *  overwrites this_iplan->direct_plan->f_hat \n   *  overwrites this_iplan->direct_plan->f\n   *  updates this_iplan->r_iter\n   */\n  if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n    copyc_w(this_iplan->direct_plan->f_hat, this_iplan->w_hat,\n\t    this_iplan->p_hat_iter, this_iplan->direct_plan->N_L);\n  else\n    copyc(this_iplan->direct_plan->f_hat, this_iplan->p_hat_iter,\n\t  this_iplan->direct_plan->N_L);\n  \n  nfft_trafo(this_iplan->direct_plan);\n\n  updatec_xpay(this_iplan->r_iter, -this_iplan->alpha_iter,\n\t      this_iplan->direct_plan->f, this_iplan->direct_plan->M);\n  \n  this_iplan->dot_r_iter_old = this_iplan->dot_r_iter;\n  if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n    this_iplan->dot_r_iter =\n      dotproductc_w(this_iplan->r_iter, this_iplan->w,\n\t\t    this_iplan->direct_plan->M);\n  else\n    this_iplan->dot_r_iter =\n      dotproductc(this_iplan->r_iter, this_iplan->direct_plan->M);\n  \n  /** step 12\n   */\n  this_iplan->beta_iter =\n    this_iplan->dot_r_iter / this_iplan->dot_r_iter_old;\n  \n  /** step 13-16\n   *  updates this_iplan->f_hat_iter_2nd\n   */\n  if(this_iplan->infft_flags & ITERATE_2nd)\n    {\n      this_iplan->gamma_iter_old = this_iplan->gamma_iter;\n      this_iplan->gamma_iter =\n\tthis_iplan->beta_iter * this_iplan->gamma_iter_old + 1;\n      \n      updatec_axpby(this_iplan->f_hat_iter_2nd, \n\t\t    this_iplan->beta_iter * this_iplan->gamma_iter_old / \n\t\t    this_iplan->gamma_iter, this_iplan->f_hat_iter, \n\t\t    1.0 / this_iplan->gamma_iter, this_iplan->direct_plan->N_L);\n    }\n  \n  /** step 16\n   *  overwrites this_iplan->direct_plan->f\n   *  overwrites this_iplan->direct_plan->f_hat\n   *  updates this_iplan->p_hat_iter\n   */\n  if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n    copyc_w(this_iplan->direct_plan->f, this_iplan->w,\n\t    this_iplan->r_iter, this_iplan->direct_plan->M);\n  else\n    copyc(this_iplan->direct_plan->f, this_iplan->r_iter,\n\t  this_iplan->direct_plan->M); \n  \n  nfft_adjoint(this_iplan->direct_plan);\n  \n  updatec_axpy(this_iplan->p_hat_iter, this_iplan->beta_iter,\n\t       this_iplan->direct_plan->f_hat, this_iplan->direct_plan->N_L);\n  \n  if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n    this_iplan->dot_p_hat_iter = \n      dotproductc_w(this_iplan->p_hat_iter, this_iplan->w_hat,\n\t\t    this_iplan->direct_plan->N_L);\n  else\n    this_iplan->dot_p_hat_iter =\n      dotproductc(this_iplan->p_hat_iter, this_iplan->direct_plan->N_L);\n}\n\nvoid infft_loop_one_step(infft_plan *this_iplan)\n{\n  if(this_iplan->infft_flags & LANDWEBER)\n    infft_loop_one_step_landweber(this_iplan);\n\n  if(this_iplan->infft_flags & STEEPEST_DESCENT)\n    infft_loop_one_step_steepest_descent(this_iplan);\n  \n  if(this_iplan->infft_flags & CGNR_E)\n    infft_loop_one_step_cgnr_e(this_iplan);\n  \n  if(this_iplan->infft_flags & CGNE_R)\n    infft_loop_one_step_cgne_r(this_iplan);\n}\n\nvoid infft_finalize(infft_plan *this_iplan)\n{\n  if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n    fftw_free(this_iplan->w);\n  \n  if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n    fftw_free(this_iplan->w_hat);\n  \n  if(this_iplan->infft_flags & ITERATE_2nd)\n    fftw_free(this_iplan->f_hat_iter_2nd);\n  \n  if(this_iplan->infft_flags & CGNR_E)\n    {\n      fftw_free(this_iplan->v_iter);\n      fftw_free(this_iplan->z_hat_iter);\n    }\n  \n  if(this_iplan->infft_flags & STEEPEST_DESCENT)\n    fftw_free(this_iplan->v_iter);\n  \n  fftw_free(this_iplan->p_hat_iter);\n  fftw_free(this_iplan->f_hat_iter);\n\n  fftw_free(this_iplan->r_iter);\n  fftw_free(this_iplan->given_f);\n}\n";
		rLen = 17550;
		rLoc = 35462;
		rType = 0;
		vrLen = 945;
		vrLoc = 52061;
	};
	4E29328C082E50BD004AD73C = {
		fRef = 4E6E40C2082CB46F00642FF0;
		isa = PBXTextBookmark;
		name = "/** inverse nfft \n * -----------------------------------------------------------------------------\n * -----------------------------------------------------------------------------\n */\nvoid infft_init_specific(infft_plan *this_iplan, nfft_plan *direct_plan,\n\t\t\t int infft_flags)\n{\n  this_iplan->direct_plan = direct_plan;\n  this_iplan->infft_flags = infft_flags;\n  \n  this_iplan->given_f = (fftw_complex*)\n    fftw_malloc(this_iplan->direct_plan->M*sizeof(fftw_complex));\n\n  this_iplan->r_iter = (fftw_complex*)\n    fftw_malloc(this_iplan->direct_plan->M*sizeof(fftw_complex));\n\n  this_iplan->f_hat_iter = (fftw_complex*)\n    fftw_malloc(this_iplan->direct_plan->N_L*sizeof(fftw_complex));\n\n  this_iplan->p_hat_iter = (fftw_complex*)\n    fftw_malloc(this_iplan->direct_plan->N_L*sizeof(fftw_complex));\n\n  if(this_iplan->infft_flags & LANDWEBER)\n    {\n      this_iplan->z_hat_iter = this_iplan->p_hat_iter;\n    }\n\n  if(this_iplan->infft_flags & STEEPEST_DESCENT)\n    {\n      this_iplan->z_hat_iter = this_iplan->p_hat_iter;\n\n      this_iplan->v_iter = (fftw_complex*)\n\tfftw_malloc(this_iplan->direct_plan->M*sizeof(fftw_complex));\n    }\n\n  if(this_iplan->infft_flags & CGNR_E)\n    {\n      this_iplan->z_hat_iter = (fftw_complex*)\n\tfftw_malloc(this_iplan->direct_plan->N_L*sizeof(fftw_complex));\n\n      this_iplan->v_iter = (fftw_complex*)\n\tfftw_malloc(this_iplan->direct_plan->M*sizeof(fftw_complex));\n    }\n\n  if(this_iplan->infft_flags & CGNE_R)\n    {\n      this_iplan->z_hat_iter = this_iplan->p_hat_iter;\n    }\n\n  if(this_iplan->infft_flags & ITERATE_2nd)\n    this_iplan->f_hat_iter_2nd = (fftw_complex*) \n      fftw_malloc(this_iplan->direct_plan->N_L*sizeof(fftw_complex));\n\n  if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n    this_iplan->w = \n      (double*) fftw_malloc(this_iplan->direct_plan->M*sizeof(double));\n  \n  if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n    this_iplan->w_hat = \n      (double*) fftw_malloc(this_iplan->direct_plan->N_L*sizeof(double));\n}\n\nvoid infft_init(infft_plan *this_iplan, nfft_plan *direct_plan)\n{\n  infft_init_specific(this_iplan, direct_plan, CGNR_E);\n}\n\nvoid infft_before_loop_help(infft_plan *this_iplan)\n{\n  /** step 2\n   *  overwrites this_iplan->direct_plan->f_hat \n   *  overwrites this_iplan->r_iter\n   */\n  copyc(this_iplan->direct_plan->f_hat, this_iplan->f_hat_iter,\n\tthis_iplan->direct_plan->N_L);\n  \n  SWAPC(this_iplan->r_iter, this_iplan->direct_plan->f);\n  nfft_trafo(this_iplan->direct_plan);\n  SWAPC(this_iplan->r_iter, this_iplan->direct_plan->f);\n\n  updatec_axpy(this_iplan->r_iter, -1.0, this_iplan->given_f,\n\t       this_iplan->direct_plan->M);\n\n  if((!(this_iplan->infft_flags & LANDWEBER)) ||\n     (this_iplan->infft_flags & NORMS_FOR_LANDWEBER))\n    {\n      if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n\tthis_iplan->dot_r_iter =\n\t  dotproductc_w(this_iplan->r_iter, this_iplan->w,\n\t\t\tthis_iplan->direct_plan->M);\n      else\n\tthis_iplan->dot_r_iter =\n\t  dotproductc(this_iplan->r_iter, this_iplan->direct_plan->M);\n    }\n  \n  /** step 3\n   *  overwrites this_iplan->direct_plan->f\n   *  overwrites this_iplan->z_hat_iter resp. this_iplan->z_hat_iter\n   */ \n\n  if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n    copyc_w(this_iplan->direct_plan->f, this_iplan->w, this_iplan->r_iter,\n\t    this_iplan->direct_plan->M);\n  else\n    copyc(this_iplan->direct_plan->f, this_iplan->r_iter,\n\t  this_iplan->direct_plan->M);\n  \n  SWAPC(this_iplan->z_hat_iter, this_iplan->direct_plan->f_hat);\n  nfft_adjoint(this_iplan->direct_plan);\n  SWAPC(this_iplan->z_hat_iter, this_iplan->direct_plan->f_hat);\n  \n  if((!(this_iplan->infft_flags & LANDWEBER)) ||\n     (this_iplan->infft_flags & NORMS_FOR_LANDWEBER))\n    {\n      if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n\tthis_iplan->dot_z_hat_iter = \n\t  dotproductc_w(this_iplan->z_hat_iter, this_iplan->w_hat,\n\t\t\tthis_iplan->direct_plan->N_L);\n      else\n\tthis_iplan->dot_z_hat_iter =\n\t  dotproductc(this_iplan->z_hat_iter, this_iplan->direct_plan->N_L);\n    }\n\n  if(this_iplan->infft_flags & CGNE_R)\n    this_iplan->dot_p_hat_iter = this_iplan->dot_z_hat_iter;\n\n} /* void infft_before_loop_help */\n\nvoid infft_before_loop(infft_plan *this_iplan)\n{\n  infft_before_loop_help(this_iplan);\n\n  if(this_iplan->infft_flags & CGNR_E)\n    {\n      /** step 4-6\n       *  overwrites this_iplan->f_hat_iter_2nd\n       */\n      if(this_iplan->infft_flags & ITERATE_2nd)\n\tcopyc(this_iplan->f_hat_iter_2nd, this_iplan->f_hat_iter,\n\t      this_iplan->direct_plan->N_L);\n     \n      /** step 7\n       *  overwrites this_iplan->p_hat_iter\n       */\n      copyc(this_iplan->p_hat_iter, this_iplan->z_hat_iter,\n\t    this_iplan->direct_plan->N_L);\n    }\n\n  if(this_iplan->infft_flags & CGNE_R)\n    {\n      /** step 4-7\n       *  overwrites this_iplan->f_hat_iter_2nd\n       */\n      if(this_iplan->infft_flags & ITERATE_2nd)\n\t{\n\t  this_iplan->gamma_iter=1.0;\n\t  copyc(this_iplan->f_hat_iter_2nd, this_iplan->f_hat_iter,\n\t\tthis_iplan->direct_plan->N_L);\n\t}\n    }\n} /* void infft_before_loop */\n\nvoid infft_loop_one_step_landweber(infft_plan *this_iplan)\n{\n  /** step 5\n   *  updates this_iplan->f_hat_iter\n   */\n  if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n    updatec_xpawy(this_iplan->f_hat_iter, this_iplan->alpha_iter,\n\t\t  this_iplan->w_hat, this_iplan->z_hat_iter,\n\t\t  this_iplan->direct_plan->N_L);\n  else\n    updatec_xpay(this_iplan->f_hat_iter, this_iplan->alpha_iter,\n\t\tthis_iplan->z_hat_iter, this_iplan->direct_plan->N_L);\n  \n  /** step 6\n   *  original residual, not the updated residual,\n   *  overwrites this_iplan->r_iter\n   *  overwrites this_iplan->direct_plan->f_hat \n   */\n  copyc(this_iplan->direct_plan->f_hat, this_iplan->f_hat_iter,\n\tthis_iplan->direct_plan->N_L);\n\n  SWAPC(this_iplan->r_iter,this_iplan->direct_plan->f);\n  nfft_trafo(this_iplan->direct_plan);\n  SWAPC(this_iplan->r_iter,this_iplan->direct_plan->f);\n  \n  updatec_axpy(this_iplan->r_iter, -1.0, this_iplan->given_f, \n\t       this_iplan->direct_plan->M);\n\n  if(this_iplan->infft_flags & NORMS_FOR_LANDWEBER)\n    {\n      if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n\tthis_iplan->dot_r_iter = dotproductc_w(this_iplan->r_iter,this_iplan->w,\n\t\t\t\t\t       this_iplan->direct_plan->M);\n      else\n\tthis_iplan->dot_r_iter =\n\t  dotproductc(this_iplan->r_iter, this_iplan->direct_plan->M);\n    }\n\n  /** step 7\n   *  overwrites this_iplan->direct_plan->f \n   *  overwrites this_iplan->z_hat_iter\n   */\n  if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n    copyc_w(this_iplan->direct_plan->f, this_iplan->w,\n\t    this_iplan->r_iter, this_iplan->direct_plan->M);\n  else\n    copyc(this_iplan->direct_plan->f, this_iplan->r_iter,\n\t  this_iplan->direct_plan->M);\n    \n  SWAPC(this_iplan->z_hat_iter,this_iplan->direct_plan->f_hat);\n  nfft_adjoint(this_iplan->direct_plan);\n  SWAPC(this_iplan->z_hat_iter,this_iplan->direct_plan->f_hat);\n\n  if(this_iplan->infft_flags & NORMS_FOR_LANDWEBER)\n    {\n      if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n\tthis_iplan->dot_z_hat_iter = \n\t  dotproductc_w(this_iplan->z_hat_iter, this_iplan->w_hat,\n\t\t\tthis_iplan->direct_plan->N_L);\n      else\n\tthis_iplan->dot_z_hat_iter =\n\t  dotproductc(this_iplan->z_hat_iter, this_iplan->direct_plan->N_L);\n    }\n} /* void infft_loop_one_step_landweber */\n\nvoid infft_loop_one_step_steepest_descent(infft_plan *this_iplan)\n{\n  /** step 5\n   *  overwrites this_iplan->direct_plan->f_hat \n   *  overwrites this_iplan->v_iter\n   */\n  if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n    copyc_w(this_iplan->direct_plan->f_hat, this_iplan->w_hat,\n\t    this_iplan->z_hat_iter, this_iplan->direct_plan->N_L);\n  else\n    copyc(this_iplan->direct_plan->f_hat, this_iplan->z_hat_iter,\n\t  this_iplan->direct_plan->N_L);\n  \n  SWAPC(this_iplan->v_iter,this_iplan->direct_plan->f);\n  nfft_trafo(this_iplan->direct_plan);\n  SWAPC(this_iplan->v_iter,this_iplan->direct_plan->f);\n  \n  if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n    this_iplan->dot_v_iter = dotproductc_w(this_iplan->v_iter, this_iplan->w,\n\t\t\t\t\t   this_iplan->direct_plan->M);\n  else\n    this_iplan->dot_v_iter =\n      dotproductc(this_iplan->v_iter, this_iplan->direct_plan->M);\n  \n  /** step 6\n   */\n  this_iplan->alpha_iter =\n    this_iplan->dot_z_hat_iter / this_iplan->dot_v_iter;\n\n  /** step 7\n   *  updates this_iplan->f_hat_iter\n   */\n  if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n    updatec_xpawy(this_iplan->f_hat_iter, this_iplan->alpha_iter,\n\t\t  this_iplan->w_hat,this_iplan->z_hat_iter,\n\t\t  this_iplan->direct_plan->N_L);\n  else\n    updatec_xpay(this_iplan->f_hat_iter, this_iplan->alpha_iter,\n\t\tthis_iplan->z_hat_iter, this_iplan->direct_plan->N_L);\n\n  /** step 8\n   *  updates this_iplan->r_iter\n   */\n  updatec_xpay(this_iplan->r_iter, -this_iplan->alpha_iter, this_iplan->v_iter,\n\t      this_iplan->direct_plan->M);\n\n  if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n    this_iplan->dot_r_iter = dotproductc_w(this_iplan->r_iter, this_iplan->w,\n\t\t\t\t\t   this_iplan->direct_plan->M);\n  else\n    this_iplan->dot_r_iter =\n      dotproductc(this_iplan->r_iter, this_iplan->direct_plan->M);\n\n  /** step 9\n   *  overwrites this_iplan->direct_plan->f\n   *  overwrites this_iplan->z_hat_iter\n   */\n  if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n    copyc_w(this_iplan->direct_plan->f, this_iplan->w, this_iplan->r_iter,\n\t    this_iplan->direct_plan->M);\n  else\n    copyc(this_iplan->direct_plan->f, this_iplan->r_iter,\n\t  this_iplan->direct_plan->M);\n  \n  SWAPC(this_iplan->z_hat_iter,this_iplan->direct_plan->f_hat);\n  nfft_adjoint(this_iplan->direct_plan);\n  SWAPC(this_iplan->z_hat_iter,this_iplan->direct_plan->f_hat);\n  \n  if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n    this_iplan->dot_z_hat_iter =\n      dotproductc_w(this_iplan->z_hat_iter, this_iplan->w_hat, \n\t\t    this_iplan->direct_plan->N_L);\n  else\n    this_iplan->dot_z_hat_iter =\n      dotproductc(this_iplan->z_hat_iter, this_iplan->direct_plan->N_L);\n} /* void infft_loop_one_step_steepest_descent */\n\nvoid infft_loop_one_step_cgnr_e(infft_plan *this_iplan)\n{\n  /** step 9\n   *  overwrites this_iplan->direct_plan->f_hat \n   *  overwrites this_iplan->v_iter\n   */\n  if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n    copyc_w(this_iplan->direct_plan->f_hat, this_iplan->w_hat,\n\t    this_iplan->p_hat_iter, this_iplan->direct_plan->N_L);\n  else\n    copyc(this_iplan->direct_plan->f_hat, this_iplan->p_hat_iter,\n\t  this_iplan->direct_plan->N_L);\n  \n  SWAPC(this_iplan->v_iter,this_iplan->direct_plan->f);\n  nfft_trafo(this_iplan->direct_plan);\n  SWAPC(this_iplan->v_iter,this_iplan->direct_plan->f);\n  \n  if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n    this_iplan->dot_v_iter = dotproductc_w(this_iplan->v_iter, this_iplan->w,\n\t\t\t\t\t   this_iplan->direct_plan->M);\n  else\n    this_iplan->dot_v_iter =\n      dotproductc(this_iplan->v_iter, this_iplan->direct_plan->M);\n  \n  /** step 10\n   */\n  this_iplan->alpha_iter =\n    this_iplan->dot_z_hat_iter / this_iplan->dot_v_iter;\n\n  /** step 11\n   *  updates this_iplan->f_hat_iter\n   */\n  if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n    updatec_xpawy(this_iplan->f_hat_iter, this_iplan->alpha_iter,\n\t\t  this_iplan->w_hat, this_iplan->p_hat_iter,\n\t\t  this_iplan->direct_plan->N_L);\n  else\n    updatec_xpay(this_iplan->f_hat_iter, this_iplan->alpha_iter, \n\t\tthis_iplan->p_hat_iter, this_iplan->direct_plan->N_L);\n\n  /** step 12-15\n   *  updates this_iplan->f_hat_iter_2nd\n   */\n  if(this_iplan->infft_flags & ITERATE_2nd)\n    {\n      this_iplan->alpha_iter_2nd =\n\tthis_iplan->dot_r_iter / this_iplan->dot_z_hat_iter;\n      \n      if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n\tupdatec_xpawy(this_iplan->f_hat_iter_2nd, this_iplan->alpha_iter_2nd,\n\t\t      this_iplan->w_hat, this_iplan->z_hat_iter,\n\t\t      this_iplan->direct_plan->N_L);\n      else\n\tupdatec_xpay(this_iplan->f_hat_iter_2nd, this_iplan->alpha_iter_2nd,\n\t\t    this_iplan->z_hat_iter, this_iplan->direct_plan->N_L);\n    }\n  \n  /** step 16\n   *  updates this_iplan->r_iter\n   */\n  updatec_xpay(this_iplan->r_iter, -this_iplan->alpha_iter, this_iplan->v_iter,\n\t      this_iplan->direct_plan->M);\n  \n  if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n    this_iplan->dot_r_iter = dotproductc_w(this_iplan->r_iter, this_iplan->w,\n\t\t\t\t\t   this_iplan->direct_plan->M);\n  else\n    this_iplan->dot_r_iter =\n      dotproductc(this_iplan->r_iter, this_iplan->direct_plan->M);\n\n  /** step 17\n   *  overwrites this_iplan->direct_plan->f\n   *  overwrites this_iplan->direct_plan->r_iter\n   */\n  if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n    copyc_w(this_iplan->direct_plan->f, this_iplan->w, \n\t    this_iplan->r_iter, this_iplan->direct_plan->M);\n  else\n    copyc(this_iplan->direct_plan->f, this_iplan->r_iter,\n\t  this_iplan->direct_plan->M);\n  \n  SWAPC(this_iplan->z_hat_iter,this_iplan->direct_plan->f_hat);\n  nfft_adjoint(this_iplan->direct_plan);\n  SWAPC(this_iplan->z_hat_iter,this_iplan->direct_plan->f_hat);\n\n  this_iplan->dot_z_hat_iter_old = this_iplan->dot_z_hat_iter;\n  if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n    this_iplan->dot_z_hat_iter =\n      dotproductc_w(this_iplan->z_hat_iter, this_iplan->w_hat, \n\t\t    this_iplan->direct_plan->N_L);\n  else\n    this_iplan->dot_z_hat_iter =\n      dotproductc(this_iplan->z_hat_iter, this_iplan->direct_plan->N_L);\n  \n  /** step 18\n   */\n  this_iplan->beta_iter =\n    this_iplan->dot_z_hat_iter / this_iplan->dot_z_hat_iter_old;\n  \n  /** step 19\n   *  updates this_iplan->p_hat_iter\n   */\n  updatec_axpy(this_iplan->p_hat_iter, this_iplan->beta_iter, \n\t       this_iplan->z_hat_iter, this_iplan->direct_plan->N_L);\n} /* void infft_loop_one_step_cgnr_e */\n\nvoid infft_loop_one_step_cgne_r(infft_plan *this_iplan)\n{\n  /** step 9\n   */\n  this_iplan->alpha_iter =\n    this_iplan->dot_r_iter / this_iplan->dot_p_hat_iter;\n  \n  /** step 10\n   *  updates this_iplan->f_hat_iter\n   */\n  if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n    updatec_xpawy(this_iplan->f_hat_iter, this_iplan->alpha_iter,\n\t\t  this_iplan->w_hat, this_iplan->p_hat_iter,\n\t\t  this_iplan->direct_plan->N_L);\n  else\n    updatec_xpay(this_iplan->f_hat_iter, this_iplan->alpha_iter,\n\t\tthis_iplan->p_hat_iter, this_iplan->direct_plan->N_L);\n  \n  /** step 11\n   *  overwrites this_iplan->direct_plan->f_hat \n   *  overwrites this_iplan->direct_plan->f\n   *  updates this_iplan->r_iter\n   */\n  if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n    copyc_w(this_iplan->direct_plan->f_hat, this_iplan->w_hat,\n\t    this_iplan->p_hat_iter, this_iplan->direct_plan->N_L);\n  else\n    copyc(this_iplan->direct_plan->f_hat, this_iplan->p_hat_iter,\n\t  this_iplan->direct_plan->N_L);\n  \n  nfft_trafo(this_iplan->direct_plan);\n\n  updatec_xpay(this_iplan->r_iter, -this_iplan->alpha_iter,\n\t      this_iplan->direct_plan->f, this_iplan->direct_plan->M);\n  \n  this_iplan->dot_r_iter_old = this_iplan->dot_r_iter;\n  if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n    this_iplan->dot_r_iter =\n      dotproductc_w(this_iplan->r_iter, this_iplan->w,\n\t\t    this_iplan->direct_plan->M);\n  else\n    this_iplan->dot_r_iter =\n      dotproductc(this_iplan->r_iter, this_iplan->direct_plan->M);\n  \n  /** step 12\n   */\n  this_iplan->beta_iter =\n    this_iplan->dot_r_iter / this_iplan->dot_r_iter_old;\n  \n  /** step 13-16\n   *  updates this_iplan->f_hat_iter_2nd\n   */\n  if(this_iplan->infft_flags & ITERATE_2nd)\n    {\n      this_iplan->gamma_iter_old = this_iplan->gamma_iter;\n      this_iplan->gamma_iter =\n\tthis_iplan->beta_iter * this_iplan->gamma_iter_old + 1;\n      \n      updatec_axpby(this_iplan->f_hat_iter_2nd, \n\t\t    this_iplan->beta_iter * this_iplan->gamma_iter_old / \n\t\t    this_iplan->gamma_iter, this_iplan->f_hat_iter, \n\t\t    1.0 / this_iplan->gamma_iter, this_iplan->direct_plan->N_L);\n    }\n  \n  /** step 16\n   *  overwrites this_iplan->direct_plan->f\n   *  overwrites this_iplan->direct_plan->f_hat\n   *  updates this_iplan->p_hat_iter\n   */\n  if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n    copyc_w(this_iplan->direct_plan->f, this_iplan->w,\n\t    this_iplan->r_iter, this_iplan->direct_plan->M);\n  else\n    copyc(this_iplan->direct_plan->f, this_iplan->r_iter,\n\t  this_iplan->direct_plan->M); \n  \n  nfft_adjoint(this_iplan->direct_plan);\n  \n  updatec_axpy(this_iplan->p_hat_iter, this_iplan->beta_iter,\n\t       this_iplan->direct_plan->f_hat, this_iplan->direct_plan->N_L);\n  \n  if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n    this_iplan->dot_p_hat_iter = \n      dotproductc_w(this_iplan->p_hat_iter, this_iplan->w_hat,\n\t\t    this_iplan->direct_plan->N_L);\n  else\n    this_iplan->dot_p_hat_iter =\n      dotproductc(this_iplan->p_hat_iter, this_iplan->direct_plan->N_L);\n}\n\nvoid infft_loop_one_step(infft_plan *this_iplan)\n{\n  if(this_iplan->infft_flags & LANDWEBER)\n    infft_loop_one_step_landweber(this_iplan);\n\n  if(this_iplan->infft_flags & STEEPEST_DESCENT)\n    infft_loop_one_step_steepest_descent(this_iplan);\n  \n  if(this_iplan->infft_flags & CGNR_E)\n    infft_loop_one_step_cgnr_e(this_iplan);\n  \n  if(this_iplan->infft_flags & CGNE_R)\n    infft_loop_one_step_cgne_r(this_iplan);\n}\n\nvoid infft_finalize(infft_plan *this_iplan)\n{\n  if(this_iplan->infft_flags & PRECOMPUTE_WEIGHT)\n    fftw_free(this_iplan->w);\n  \n  if(this_iplan->infft_flags & PRECOMPUTE_DAMP)\n    fftw_free(this_iplan->w_hat);\n  \n  if(this_iplan->infft_flags & ITERATE_2nd)\n    fftw_free(this_iplan->f_hat_iter_2nd);\n  \n  if(this_iplan->infft_flags & CGNR_E)\n    {\n      fftw_free(this_iplan->v_iter);\n      fftw_free(this_iplan->z_hat_iter);\n    }\n  \n  if(this_iplan->infft_flags & STEEPEST_DESCENT)\n    fftw_free(this_iplan->v_iter);\n  \n  fftw_free(this_iplan->p_hat_iter);\n  fftw_free(this_iplan->f_hat_iter);\n\n  fftw_free(this_iplan->r_iter);\n  fftw_free(this_iplan->given_f);\n}\n";
		rLen = 17550;
		rLoc = 35462;
		rType = 0;
		vrLen = 945;
		vrLoc = 52061;
	};
	4E29328E082E50BD004AD73C = {
		fRef = 4E293281082E501F004AD73C;
		isa = PBXTextBookmark;
		name = "infsft.h: 1";
		rLen = 0;
		rLoc = 0;
		rType = 0;
		vrLen = 40;
		vrLoc = 0;
	};
	4E2932A7082E5984004AD73C = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {766, 1696}}";
			sepNavSelRange = "{247, 0}";
			sepNavVisRect = "{{0, 1290}, {766, 406}}";
		};
	};
	4E2932B3082E5ABD004AD73C = {
		fRef = 4E2932A7082E5984004AD73C;
		isa = PBXTextBookmark;
		name = "template.c: 1";
		rLen = 0;
		rLoc = 2264;
		rType = 0;
		vrLen = 0;
		vrLoc = 0;
	};
	4E2932F5082E639A004AD73C = {
		fRef = 4E6CD54B07C54A7E0040176B;
		isa = PBXTextBookmark;
		name = "nfsft.h: 84";
		rLen = 0;
		rLoc = 1831;
		rType = 0;
		vrLen = 624;
		vrLoc = 1079;
	};
	4E29331A082E672F004AD73C = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {964, 3455}}";
			sepNavSelRange = "{1662, 3091}";
			sepNavVisRect = "{{0, 2879}, {964, 576}}";
			sepNavWindowFrame = "{{15, 72}, {1280, 861}}";
		};
	};
	4E29332B082E67D9004AD73C = {
		fRef = 4E29331A082E672F004AD73C;
		isa = PBXTextBookmark;
		name = "wrapper.c: 1";
		rLen = 0;
		rLoc = 0;
		rType = 0;
		vrLen = 1082;
		vrLoc = 0;
	};
	4E5470A208329F8600CA0375 = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {986, 3423}}";
			sepNavSelRange = "{0, 0}";
			sepNavVisRect = "{{0, 0}, {961, 470}}";
		};
	};
	4E5470A80832A04100CA0375 = {
		fRef = 4E5470A208329F8600CA0375;
		isa = PBXTextBookmark;
		name = "summation.c: 1";
		rLen = 0;
		rLoc = 0;
		rType = 0;
		vrLen = 903;
		vrLoc = 0;
	};
	4E5470E10832A31200CA0375 = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {1063, 5215}}";
			sepNavSelRange = "{10142, 0}";
			sepNavVisRect = "{{0, 4624}, {964, 576}}";
		};
	};
	4E5470E20832A31200CA0375 = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {964, 720}}";
			sepNavSelRange = "{668, 106}";
			sepNavVisRect = "{{0, 112}, {964, 576}}";
		};
	};
	4E5471090832A94F00CA0375 = {
		fRef = 4E5470E20832A31200CA0375;
		isa = PBXTextBookmark;
		name = "void flft(int M, int t, int n, complex *f_hat, struct U_type ***U, \n          struct nfsft_transform_wisdom *tw);\n";
		rLen = 107;
		rLoc = 556;
		rType = 0;
		vrLen = 794;
		vrLoc = 0;
	};
	4E5471280832AB8400CA0375 = {
		fRef = 4E2932A7082E5984004AD73C;
		isa = PBXTextBookmark;
		name = "template.c: 18";
		rLen = 0;
		rLoc = 247;
		rType = 0;
		vrLen = 518;
		vrLoc = 1805;
	};
	4E6A5CA0082EA09E00ED6FD8 = {
		fRef = 4E6E40C4082CB46F00642FF0;
		isa = PBXTextBookmark;
		name = "options.h: 1";
		rLen = 0;
		rLoc = 0;
		rType = 0;
		vrLen = 1401;
		vrLoc = 0;
	};
	4E6A5CA3082EA09E00ED6FD8 = {
		fRef = 4E6E40C4082CB46F00642FF0;
		isa = PBXTextBookmark;
		name = "options.h: 1";
		rLen = 0;
		rLoc = 0;
		rType = 0;
		vrLen = 1401;
		vrLoc = 0;
	};
	4E6A5CA5082EA12700ED6FD8 = {
		fRef = 4E6E40C3082CB46F00642FF0;
		isa = PBXTextBookmark;
		name = "nfft.h: 127";
		rLen = 0;
		rLoc = 5103;
		rType = 0;
		vrLen = 1442;
		vrLoc = 4339;
	};
	4E6A5CA7082EA12700ED6FD8 = {
		isa = PBXFileReference;
		lastKnownFileType = sourcecode.cpp.cpp;
		name = group.cpp;
		path = /sw/share/doc/doxygen/examples/group.cpp;
		refType = 0;
		sourceTree = "<absolute>";
	};
	4E6A5CA8082EA12700ED6FD8 = {
		fRef = 4E6E40C3082CB46F00642FF0;
		isa = PBXTextBookmark;
		name = "nfft.h: 127";
		rLen = 0;
		rLoc = 5103;
		rType = 0;
		vrLen = 1442;
		vrLoc = 4339;
	};
	4E6A5CBD082EA20000ED6FD8 = {
		fRef = 4E6A5CA7082EA12700ED6FD8;
		isa = PBXTextBookmark;
		name = "@defgroup group1";
		rLen = 16;
		rLoc = 4;
		rType = 0;
		vrLen = 563;
		vrLoc = 0;
	};
	4E6A5CC3082EA20000ED6FD8 = {
		fRef = 4E6A5CA7082EA12700ED6FD8;
		isa = PBXTextBookmark;
		name = "@defgroup group1";
		rLen = 16;
		rLoc = 4;
		rType = 0;
		vrLen = 563;
		vrLoc = 0;
	};
	4E6CD54507C54A7E0040176B = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {964, 2831}}";
			sepNavSelRange = "{3683, 0}";
			sepNavVisRect = "{{0, 2240}, {964, 576}}";
		};
	};
	4E6CD54607C54A7E0040176B = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {943, 1295}}";
			sepNavSelRange = "{2221, 0}";
			sepNavVisRect = "{{0, 704}, {943, 576}}";
			sepNavWindowFrame = "{{15, 77}, {1280, 755}}";
		};
	};
	4E6CD54A07C54A7E0040176B = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {964, 12159}}";
			sepNavSelRange = "{6952, 0}";
			sepNavVisRect = "{{0, 4588}, {964, 576}}";
			sepNavWindowFrame = "{{72, 109}, {1280, 755}}";
		};
	};
	4E6CD54B07C54A7E0040176B = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {964, 2079}}";
			sepNavSelRange = "{222, 0}";
			sepNavVisRect = "{{0, 0}, {964, 576}}";
		};
	};
	4E6CD54C07C54A7E0040176B = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {1233, 6063}}";
			sepNavSelRange = "{4496, 0}";
			sepNavVisRect = "{{0, 4068}, {1233, 233}}";
		};
	};
	4E6CD54D07C54A7E0040176B = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {964, 735}}";
			sepNavSelRange = "{1019, 0}";
			sepNavVisRect = "{{0, 218}, {964, 470}}";
		};
	};
	4E6CD56E07C54E170040176B = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {964, 1407}}";
			sepNavSelRange = "{147, 102}";
			sepNavVisRect = "{{0, 0}, {964, 576}}";
		};
	};
	4E6CD57607C54E630040176B = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {964, 3615}}";
			sepNavSelRange = "{2101, 14}";
			sepNavVisRect = "{{0, 1683}, {964, 576}}";
		};
	};
	4E6CD5D607C555500040176B = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {898, 1167}}";
			sepNavSelRange = "{1472, 0}";
			sepNavVisRect = "{{0, 96}, {898, 576}}";
		};
	};
	4E6CD5D707C555500040176B = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {898, 4095}}";
			sepNavSelRange = "{3686, 0}";
			sepNavVisRect = "{{0, 1968}, {898, 576}}";
		};
	};
	4E6E40C2082CB46F00642FF0 = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {1233, 21839}}";
			sepNavSelRange = "{37720, 0}";
			sepNavVisRect = "{{0, 14228}, {1233, 233}}";
		};
	};
	4E6E40C3082CB46F00642FF0 = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {943, 4191}}";
			sepNavSelRange = "{5103, 0}";
			sepNavVisRect = "{{0, 1768}, {943, 576}}";
		};
	};
	4E6E40C4082CB46F00642FF0 = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {943, 655}}";
			sepNavSelRange = "{0, 0}";
			sepNavVisRect = "{{0, 0}, {943, 576}}";
		};
	};
	4E6E40C5082CB46F00642FF0 = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {1233, 19055}}";
			sepNavSelRange = "{19917, 0}";
			sepNavVisRect = "{{0, 13092}, {1233, 233}}";
		};
	};
	4E6E40C6082CB46F00642FF0 = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {961, 3023}}";
			sepNavSelRange = "{1845, 11}";
			sepNavVisRect = "{{0, 1149}, {961, 470}}";
		};
	};
	4E6E40E9082CB6C600642FF0 = {
		activeArgIndex = 0;
		activeArgIndices = (
			YES,
		);
		argumentStrings = (
			"< ../matlab/temp.in",
		);
		configStateDict = {
			"PBXLSLaunchAction-0" = {
				PBXLSLaunchAction = 0;
				PBXLSLaunchStartAction = 1;
				PBXLSLaunchStdioStyle = 2;
				PBXLSLaunchStyle = 0;
				class = PBXLSRunLaunchConfig;
				displayName = "Executable Runner";
				identifier = com.apple.Xcode.launch.runConfig;
				remoteHostInfo = "";
				startActionInfo = "";
			};
		};
		cppStopOnCatchEnabled = 0;
		cppStopOnThrowEnabled = 0;
		customDataFormattersEnabled = 1;
		debuggerPlugin = GDBDebugging;
		disassemblyDisplayState = 0;
		dylibVariantSuffix = "";
		enableDebugStr = 1;
		environmentEntries = (
		);
		isa = PBXExecutable;
		launchableReference = 4E6E40EA082CB6C600642FF0;
		libgmallocEnabled = 0;
		name = NFSFT2;
		shlibInfoDictList = (
		);
		sourceDirectories = (
		);
		startupPath = /Users/keiner/Temporary/nfft/examples;
	};
	4E6E40EA082CB6C600642FF0 = {
		isa = PBXFileReference;
		lastKnownFileType = file;
		name = nfsft2;
		path = /Users/keiner/Temporary/nfft/examples/nfsft2;
		refType = 0;
		sourceTree = "<absolute>";
	};
	4E6EA34C083E9148004C5D07 = {
		isa = PBXFileReference;
		lastKnownFileType = sourcecode.c.c;
		name = inverse.c;
		path = /Users/keiner/Temporary/trunk/obsolete/keiner/tests/inverse/inverse.c;
		refType = 0;
		sourceTree = "<absolute>";
	};
	4E6EA353083E91AA004C5D07 = {
		isa = PBXFileReference;
		lastKnownFileType = sourcecode.c.c;
		name = glacier.c;
		path = /Users/keiner/Temporary/trunk/obsolete/kunis/example/glacier/glacier.c;
		refType = 0;
		sourceTree = "<absolute>";
	};
	4E6EA357083E94B9004C5D07 = {
		fRef = 4E6EA353083E91AA004C5D07;
		isa = PBXTextBookmark;
		name = "  /* inverse trafo */  \n  infft_before_loop(&my_iplan);\n  for(l=0;l<30;l++)\n    { \n      fprintf(stderr,\"%e,\\n\",sqrt(my_iplan.dot_r_iter));\n      infft_loop_one_step(&my_iplan);\n    }\n\n  for(k=0;k<my_plan.N_L;k++)\n    printf(\"%le %le\\n\",my_iplan.f_hat_iter[k][0],my_iplan.f_hat_iter[k][1]);\n\n  infft_finalize(&my_iplan);  \n  nfft_finalize(&my_plan);  \n";
		rLen = 352;
		rLoc = 1784;
		rType = 0;
		vrLen = 659;
		vrLoc = 1514;
	};
	4E6EA35C083E94D1004C5D07 = {
		fRef = 4E6EA34C083E9148004C5D07;
		isa = PBXTextBookmark;
		name = "inverse.c: 47";
		rLen = 0;
		rLoc = 1201;
		rType = 0;
		vrLen = 521;
		vrLoc = 917;
	};
	4E6EA365083E95C9004C5D07 = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {964, 3551}}";
			sepNavSelRange = "{4735, 0}";
			sepNavVisRect = "{{0, 2848}, {964, 576}}";
		};
	};
	4E6EA368083E95DE004C5D07 = {
		fRef = 4E293282082E501F004AD73C;
		isa = PBXTextBookmark;
		name = "infsft.c: 12";
		rLen = 0;
		rLoc = 254;
		rType = 0;
		vrLen = 790;
		vrLoc = 0;
	};
	4E6EA37C083E96CF004C5D07 = {
		fRef = 4E293281082E501F004AD73C;
		isa = PBXTextBookmark;
		name = "infsft.h: infsft_finalize";
		rLen = 0;
		rLoc = 633;
		rType = 0;
		vrLen = 641;
		vrLoc = 0;
	};
	4E6EA38C083E98CA004C5D07 = {
		fRef = 4E6E40C5082CB46F00642FF0;
		isa = PBXTextBookmark;
		name = "/** Updates \\f$x \\leftarrow a x + b y\\f$.\n */\nvoid updatec_axpby(fftw_complex* x, double a, fftw_complex* y, double b,\n\t\t   int n)\n{\n  int l;\n\n  for(l=0;l<n;l++)\n    {\n      x[l][0]=a*x[l][0]+b*y[l][0];\n      x[l][1]=a*x[l][1]+b*y[l][1];\n    }\n}\n";
		rLen = 246;
		rLoc = 20813;
		rType = 0;
		vrLen = 593;
		vrLoc = 20603;
	};
	4E6EA38D083E98CA004C5D07 = {
		fRef = 4EAD69A2083BE07E00C61F13;
		isa = PBXTextBookmark;
		name = "accuracy.c: 264";
		rLen = 0;
		rLoc = 7141;
		rType = 0;
		vrLen = 1015;
		vrLoc = 6493;
	};
	4E6EA390083E98CA004C5D07 = {
		fRef = 4E5470A208329F8600CA0375;
		isa = PBXTextBookmark;
		name = "summation.c: 1";
		rLen = 0;
		rLoc = 0;
		rType = 0;
		vrLen = 940;
		vrLoc = 0;
	};
	4E6EA3BC083E9AD7004C5D07 = {
		fRef = 4E8A26E10838C49000216481;
		isa = PBXTextBookmark;
		name = "performance.c: 72";
		rLen = 0;
		rLoc = 1639;
		rType = 0;
		vrLen = 836;
		vrLoc = 1323;
	};
	4E6EA3DD083E9C1C004C5D07 = {
		fRef = 4E6CD54C07C54A7E0040176B;
		isa = PBXTextBookmark;
		name = "void copyc_w_hat(complex **x, double **w, complex **y, int M)";
		rLen = 61;
		rLoc = 4612;
		rType = 0;
		vrLen = 446;
		vrLoc = 4457;
	};
	4E6EA3EF083E9C9D004C5D07 = {
		fileReference = 4E6EA34C083E9148004C5D07;
		functionName = "main()";
		isa = PBXFileBreakpoint;
		lineNumber = 197;
		state = 1;
	};
	4E6EA3F2083E9D6A004C5D07 = {
		fRef = 4E6CD54D07C54A7E0040176B;
		isa = PBXTextBookmark;
		name = "util.h: copyc_w_hat";
		rLen = 0;
		rLoc = 1019;
		rType = 0;
		vrLen = 1431;
		vrLoc = 247;
	};
	4E6EA3F3083E9D6A004C5D07 = {
		fRef = 4E293282082E501F004AD73C;
		isa = PBXTextBookmark;
		name = "infsft.c: 553";
		rLen = 0;
		rLoc = 18714;
		rType = 0;
		vrLen = 944;
		vrLoc = 17950;
	};
	4E6F4839082D024B007CC678 = {
		fRef = 4E6CD57607C54E630040176B;
		isa = PBXTextBookmark;
		name = "legendre.c: 155";
		rLen = 0;
		rLoc = 3157;
		rType = 0;
		vrLen = 498;
		vrLoc = 0;
	};
	4E75157F082C0CF4002018A8 = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {964, 1007}}";
			sepNavSelRange = "{1882, 0}";
			sepNavVisRect = "{{0, 431}, {964, 576}}";
		};
	};
	4E751580082C0CF4002018A8 = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {964, 11823}}";
			sepNavSelRange = "{18970, 0}";
			sepNavVisRect = "{{0, 8800}, {964, 576}}";
			sepNavWindowFrame = "{{15, 73}, {1280, 861}}";
		};
	};
	4E751588082C0D65002018A8 = {
		fRef = 4E75157F082C0CF4002018A8;
		isa = PBXTextBookmark;
		name = "u.h: 1";
		rLen = 0;
		rLoc = 287;
		rType = 0;
		vrLen = 159;
		vrLoc = 0;
	};
	4E8A26AA0838C11700216481 = {
		fRef = 4E6CD5D607C555500040176B;
		isa = PBXTextBookmark;
		name = "direct.h: adjoint_ndsft2";
		rLen = 0;
		rLoc = 3003;
		rType = 0;
		vrLen = 1507;
		vrLoc = 1500;
	};
	4E8A26AB0838C11700216481 = {
		fRef = 4E6CD5D707C555500040176B;
		isa = PBXTextBookmark;
		name = "direct.c: adjoint_ndsft2";
		rLen = 0;
		rLoc = 3723;
		rType = 0;
		vrLen = 0;
		vrLoc = 6415;
	};
	4E8A26E10838C49000216481 = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {964, 3311}}";
			sepNavSelRange = "{1639, 0}";
			sepNavVisRect = "{{0, 912}, {964, 470}}";
		};
	};
	4E8A27480838DF1300216481 = {
		isa = PBXFileReference;
		lastKnownFileType = sourcecode.c.objc;
		name = bifur.m;
		path = "/Users/keiner/Archiv/Studium/Semester04/Numerik II/Blatt08/bifur.m";
		refType = 0;
		sourceTree = "<absolute>";
	};
	4E8A274F0838DF2000216481 = {
		isa = PBXFileReference;
		lastKnownFileType = sourcecode.c.objc;
		name = makea3.m;
		path = "/Users/keiner/Archiv/Studium/Semester04/Numerik II/Blatt08/makea3.m";
		refType = 0;
		sourceTree = "<absolute>";
	};
	4E8A275A0838E1AC00216481 = {
		fRef = 4E8A274F0838DF2000216481;
		isa = PBXTextBookmark;
		name = "makea3.m: 21";
		rLen = 0;
		rLoc = 651;
		rType = 0;
		vrLen = 651;
		vrLoc = 0;
	};
	4E8A275B0838E1AC00216481 = {
		fRef = 4E8A27480838DF1300216481;
		isa = PBXTextBookmark;
		name = "bifur.m: 1";
		rLen = 0;
		rLoc = 0;
		rType = 0;
		vrLen = 588;
		vrLoc = 0;
	};
	4E8A27600838E1FB00216481 = {
		fRef = 4E8A27610838E1FB00216481;
		isa = PBXTextBookmark;
		name = "(null): 1";
		rLen = 0;
		rLoc = 0;
		rType = 0;
		vrLen = 1281;
		vrLoc = 9799;
	};
	4E8A27610838E1FB00216481 = {
		isa = PBXFileReference;
		lastKnownFileType = sourcecode.c.h;
		name = ifftw.h;
		path = "/Users/keiner/Temporary/fftw-3.0/kernel/ifftw.h";
		refType = 0;
		sourceTree = "<absolute>";
	};
	4E8A27670838E2CF00216481 = {
		fRef = 4E13CA0B07EB1770003D3B6C;
		isa = PBXTextBookmark;
		name = "fftw3.h: 1";
		rLen = 0;
		rLoc = 0;
		rType = 0;
		vrLen = 1463;
		vrLoc = 7977;
	};
	4E8E5733083E39DC0061697E = {
		fRef = 4E8E5734083E39DC0061697E;
		isa = PBXTextBookmark;
		name = "(null): 1";
		rLen = 0;
		rLoc = 0;
		rType = 0;
		vrLen = 175;
		vrLoc = 0;
	};
	4E8E5734083E39DC0061697E = {
		isa = PBXFileReference;
		lastKnownFileType = text;
		name = Makefile.am;
		path = /Users/keiner/Temporary/trunk/obsolete/keiner/kernel/Makefile.am;
		refType = 0;
		sourceTree = "<absolute>";
	};
	4E8E578B083E4CA60061697E = {
		fRef = 4E6E40C6082CB46F00642FF0;
		isa = PBXTextBookmark;
		name = dotproductc;
		rLen = 11;
		rLoc = 1845;
		rType = 0;
		vrLen = 724;
		vrLoc = 1526;
	};
	4E8E5792083E4CA60061697E = {
		fRef = 4E6E40C6082CB46F00642FF0;
		isa = PBXTextBookmark;
		name = SWAPC;
		rLen = 5;
		rLoc = 272;
		rType = 0;
		vrLen = 624;
		vrLoc = 75;
	};
	4E98AA8E084A0B0E0002D4FC = {
		fRef = 4E6EA365083E95C9004C5D07;
		isa = PBXTextBookmark;
		name = "inverse.c: 200";
		rLen = 0;
		rLoc = 4735;
		rType = 0;
		vrLen = 629;
		vrLoc = 4366;
	};
	4E98AA90084A0B0E0002D4FC = {
		fRef = 4E75157F082C0CF4002018A8;
		isa = PBXTextBookmark;
		name = "u.h: forgetU_guru";
		rLen = 0;
		rLoc = 1882;
		rType = 0;
		vrLen = 1278;
		vrLoc = 612;
	};
	4E98AA93084A0B0E0002D4FC = {
		fRef = 4E6EA365083E95C9004C5D07;
		isa = PBXTextBookmark;
		name = "inverse.c: 200";
		rLen = 0;
		rLoc = 4735;
		rType = 0;
		vrLen = 629;
		vrLoc = 4366;
	};
	4E98AA94084A0B0E0002D4FC = {
		fRef = 4E751580082C0CF4002018A8;
		isa = PBXTextBookmark;
		name = "u.c: 736";
		rLen = 0;
		rLoc = 25388;
		rType = 0;
		vrLen = 1312;
		vrLoc = 16309;
	};
	4E98AA95084A0B0E0002D4FC = {
		fRef = 4E75157F082C0CF4002018A8;
		isa = PBXTextBookmark;
		name = "u.h: forgetU_guru";
		rLen = 0;
		rLoc = 1882;
		rType = 0;
		vrLen = 1278;
		vrLoc = 612;
	};
	4E98AA96084A0B0E0002D4FC = {
		fRef = 4E6CD54B07C54A7E0040176B;
		isa = PBXTextBookmark;
		name = "nfsft.h: nfsft_forget_guru";
		rLen = 0;
		rLoc = 2187;
		rType = 0;
		vrLen = 600;
		vrLoc = 1597;
	};
	4E98AA9A084A0B570002D4FC = {
		isa = PBXFileReference;
		lastKnownFileType = text;
		name = Makefile.am;
		path = /Users/keiner/Temporary/trunk/obsolete/keiner/tests/flft/Makefile.am;
		refType = 0;
		sourceTree = "<absolute>";
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {964, 576}}";
			sepNavSelRange = "{157, 0}";
			sepNavVisRect = "{{0, 0}, {964, 576}}";
		};
	};
	4E98AA9E084A0B6C0002D4FC = {
		fRef = 4E98AA9A084A0B570002D4FC;
		isa = PBXTextBookmark;
		name = "Makefile.am: 10";
		rLen = 0;
		rLoc = 157;
		rType = 0;
		vrLen = 221;
		vrLoc = 0;
	};
	4E98AA9F084A0B6C0002D4FC = {
		fRef = 4E98AA9A084A0B570002D4FC;
		isa = PBXTextBookmark;
		name = "Makefile.am: 10";
		rLen = 0;
		rLoc = 157;
		rType = 0;
		vrLen = 221;
		vrLoc = 0;
	};
	4E98AAA1084A0B790002D4FC = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {964, 1663}}";
			sepNavSelRange = "{2109, 0}";
			sepNavVisRect = "{{0, 1087}, {964, 576}}";
		};
	};
	4E98AAA3084A0BD70002D4FC = {
		fRef = 4EAD691A083BC93100C61F13;
		isa = PBXTextBookmark;
		name = "configure.in: 45";
		rLen = 0;
		rLoc = 1479;
		rType = 0;
		vrLen = 1241;
		vrLoc = 240;
	};
	4E98AAA5084A0BD70002D4FC = {
		fRef = 4EAD691A083BC93100C61F13;
		isa = PBXTextBookmark;
		name = "configure.in: 45";
		rLen = 0;
		rLoc = 1479;
		rType = 0;
		vrLen = 1241;
		vrLoc = 240;
	};
	4E98AAA9084A1DA60002D4FC = {
		fRef = 4E29331A082E672F004AD73C;
		isa = PBXTextBookmark;
		name = "  /** The bandwidth */\n  int M;\n  /** Next greater power of 2 relative to M */\n  int N;\n  /** The number of nodes */\n  int D; \n\t/**Array of angles defining the nodes. */\n  double *angles;\n  /** Plan for fast spherical fourier transform. */\n  nfsft_plan plan;\n  complex *result;\n  double ctime;\n  int i,n,k;\n  int mode, type;\n    \n\t/* Read transform type. */\n  fscanf(stdin,\"%d\\n\",&type);\n\t/* Read transform mode. */\t\n  fscanf(stdin,\"%d\\n\",&mode);\n\n  /* Initialize nodes. */\n  fscanf(stdin,\"%d\\n\",&D);\n  angles = (double*) calloc(2*D,sizeof(double));\n  for (i = 0; i < D; i++)\n  {\n    fscanf(stdin,\"%lf\\n%lf\\n\",&angles[2*i],&angles[2*i+1]);    \n  } \n\n  /* Read bandwidth M. */  \n  fscanf(stdin,\"%d\\n\",&M);\n  /* Calculate N as next greater power of 2 of the bandwidth M. */\n  N = 1<<ngpt(M);\n  \n  /* Initialize data structures for Fourier coefficients. */\n  F_HAT = (complex**) calloc(2*M+1,sizeof(complex*));\n  for (n = -M; n <= M; n++)\n  {\n    f_hat = (complex*) calloc(N+1,sizeof(complex));\n    F_HAT[n+M] = f_hat;\n  }\n\n  /* Initialize array for function values. */\n  result = (complex*) calloc(D,sizeof(complex));\n  \n  if (type == FORWARD)\n  {      \n    /* Read Fourier coefficients from standard input. */    \n    double c;\n    for (k = 0; k <= M; k++)\n    {\n      for (n = -k; n <= k; n++)\n      {\n        fscanf(stdin,\"%lf\\n\",&c);\n        F_HAT[n+M][k] = c;\n      }  \n    }  \n\n    /* Create plan for fast spherical Fourier transform.*/\n    plan = nfsft_init(D, M, angles, F_HAT, result, 0U);\n\t\t\t\n\t   /* Switch by mode. */\n\t\t  if (mode == FAST)\n\t\t  {\t\t\n\t   \t\t/* Initialize */\n\t\t   \tnfsft_precompute(128/*M*/,1000);\n\t\t\t   /* Execute the plan. */\n\t\t\t   nfsft_trafo(plan);\n\t   }\n\t   else if (mode == SLOW)\n \t\t {\n\t  \t \t/* Execute the plan. */\n  \t\t \tndsft_trafo(plan);\n\t\t  }\n \t\t else\n\t \t {  \n\t\t    fprintf(stderr,\"Wrong transform mode!\\n\");\n\t\t  }\n\n    for (k = 0; k < D; k++)\n\t\t  {\n\t\t\t   printf(\"%17.16f\\n%17.16f\\n\",creal(result[k]),cimag(result[k]));\n \t\t }\n  }\n  else\n  {\n    /* Read function values from standard input. */    \n    double c;\n    for (k = 0; k < D; k++)\n    {\n      fscanf(stdin,\"%lf\\n\",&c);\n      result[k] = c;\n    }  \n    \n    /* Create plan for fast spherical Fourier transform.*/\n    plan = nfsft_init(D, M, angles, F_HAT, result, 0U);\n\t\t\n\t\t  /* Switch by transform mode. */\n\t\t  if (mode == FAST)\n\t\t  {\t\n      /* Precompute. */\n      nfsft_precompute(128/*M*/,1000);\n      /* Execute the plan. */\n      nfsft_adjoint(plan);\n  \t\t}\n\t\t  else if (mode == SLOW)\n\t\t  {\n      /* Execute the plan. */\n      ndsft_adjoint(plan);\n  \t\t}\n\t\t  else\n\t\t  {\n\t\t    fprintf(stderr,\"Wrong transform mode!\\n\");\n  \t\t}\n\n    for (k = 0; k <= M; k++)\n    {  \n      for (n = -k; n <= k; n++)\n      {\n        printf(\"%17.16f\\n%17.16f\\n\",creal(F_HAT[n+M][k]),cimag(F_HAT[n+M][k]));\n      }\n    }\n  }\n  \n  /* Destroy the plan. */\n  nfsft_finalize(plan);\n  \n  /* Forget wisdom. */\n  nfsft_forget();\n  \n  fftw_free(result);\n    \n  /* Free data vectors. */\n  for (n=-M;n<=M;n++)\n  {\n    fftw_free(F_HAT[n+M]);\n  }\n  \n  fftw_free(F_HAT);\n  \n  /* Free nodes. */\n  free(angles);\n  \n  return EXIT_SUCCESS;\n";
		rLen = 3091;
		rLoc = 1662;
		rType = 0;
		vrLen = 552;
		vrLoc = 4203;
	};
	4E98AAAC084A1DA60002D4FC = {
		fRef = 4E5470E20832A31200CA0375;
		isa = PBXTextBookmark;
		name = "const int M, const int t, const int n, complex *const f_hat, \n          struct nfsft_wisdom *const wisdom)";
		rLen = 106;
		rLoc = 668;
		rType = 0;
		vrLen = 1444;
		vrLoc = 72;
	};
	4E98AAAE084A1DA60002D4FC = {
		fRef = 4E29331A082E672F004AD73C;
		isa = PBXTextBookmark;
		name = "  /** The bandwidth */\n  int M;\n  /** Next greater power of 2 relative to M */\n  int N;\n  /** The number of nodes */\n  int D; \n\t/**Array of angles defining the nodes. */\n  double *angles;\n  /** Plan for fast spherical fourier transform. */\n  nfsft_plan plan;\n  complex *result;\n  double ctime;\n  int i,n,k;\n  int mode, type;\n    \n\t/* Read transform type. */\n  fscanf(stdin,\"%d\\n\",&type);\n\t/* Read transform mode. */\t\n  fscanf(stdin,\"%d\\n\",&mode);\n\n  /* Initialize nodes. */\n  fscanf(stdin,\"%d\\n\",&D);\n  angles = (double*) calloc(2*D,sizeof(double));\n  for (i = 0; i < D; i++)\n  {\n    fscanf(stdin,\"%lf\\n%lf\\n\",&angles[2*i],&angles[2*i+1]);    \n  } \n\n  /* Read bandwidth M. */  \n  fscanf(stdin,\"%d\\n\",&M);\n  /* Calculate N as next greater power of 2 of the bandwidth M. */\n  N = 1<<ngpt(M);\n  \n  /* Initialize data structures for Fourier coefficients. */\n  F_HAT = (complex**) calloc(2*M+1,sizeof(complex*));\n  for (n = -M; n <= M; n++)\n  {\n    f_hat = (complex*) calloc(N+1,sizeof(complex));\n    F_HAT[n+M] = f_hat;\n  }\n\n  /* Initialize array for function values. */\n  result = (complex*) calloc(D,sizeof(complex));\n  \n  if (type == FORWARD)\n  {      \n    /* Read Fourier coefficients from standard input. */    \n    double c;\n    for (k = 0; k <= M; k++)\n    {\n      for (n = -k; n <= k; n++)\n      {\n        fscanf(stdin,\"%lf\\n\",&c);\n        F_HAT[n+M][k] = c;\n      }  \n    }  \n\n    /* Create plan for fast spherical Fourier transform.*/\n    plan = nfsft_init(D, M, angles, F_HAT, result, 0U);\n\t\t\t\n\t   /* Switch by mode. */\n\t\t  if (mode == FAST)\n\t\t  {\t\t\n\t   \t\t/* Initialize */\n\t\t   \tnfsft_precompute(128/*M*/,1000);\n\t\t\t   /* Execute the plan. */\n\t\t\t   nfsft_trafo(plan);\n\t   }\n\t   else if (mode == SLOW)\n \t\t {\n\t  \t \t/* Execute the plan. */\n  \t\t \tndsft_trafo(plan);\n\t\t  }\n \t\t else\n\t \t {  \n\t\t    fprintf(stderr,\"Wrong transform mode!\\n\");\n\t\t  }\n\n    for (k = 0; k < D; k++)\n\t\t  {\n\t\t\t   printf(\"%17.16f\\n%17.16f\\n\",creal(result[k]),cimag(result[k]));\n \t\t }\n  }\n  else\n  {\n    /* Read function values from standard input. */    \n    double c;\n    for (k = 0; k < D; k++)\n    {\n      fscanf(stdin,\"%lf\\n\",&c);\n      result[k] = c;\n    }  \n    \n    /* Create plan for fast spherical Fourier transform.*/\n    plan = nfsft_init(D, M, angles, F_HAT, result, 0U);\n\t\t\n\t\t  /* Switch by transform mode. */\n\t\t  if (mode == FAST)\n\t\t  {\t\n      /* Precompute. */\n      nfsft_precompute(128/*M*/,1000);\n      /* Execute the plan. */\n      nfsft_adjoint(plan);\n  \t\t}\n\t\t  else if (mode == SLOW)\n\t\t  {\n      /* Execute the plan. */\n      ndsft_adjoint(plan);\n  \t\t}\n\t\t  else\n\t\t  {\n\t\t    fprintf(stderr,\"Wrong transform mode!\\n\");\n  \t\t}\n\n    for (k = 0; k <= M; k++)\n    {  \n      for (n = -k; n <= k; n++)\n      {\n        printf(\"%17.16f\\n%17.16f\\n\",creal(F_HAT[n+M][k]),cimag(F_HAT[n+M][k]));\n      }\n    }\n  }\n  \n  /* Destroy the plan. */\n  nfsft_finalize(plan);\n  \n  /* Forget wisdom. */\n  nfsft_forget();\n  \n  fftw_free(result);\n    \n  /* Free data vectors. */\n  for (n=-M;n<=M;n++)\n  {\n    fftw_free(F_HAT[n+M]);\n  }\n  \n  fftw_free(F_HAT);\n  \n  /* Free nodes. */\n  free(angles);\n  \n  return EXIT_SUCCESS;\n";
		rLen = 3091;
		rLoc = 1662;
		rType = 0;
		vrLen = 552;
		vrLoc = 4203;
	};
	4E98AAAF084A1DA60002D4FC = {
		fRef = 4E6CD54B07C54A7E0040176B;
		isa = PBXTextBookmark;
		name = "nfsft.h: nfsft_forget_guru";
		rLen = 0;
		rLoc = 2187;
		rType = 0;
		vrLen = 600;
		vrLoc = 1597;
	};
	4E98AAB1084A1DA60002D4FC = {
		fRef = 4E6CD54B07C54A7E0040176B;
		isa = PBXTextBookmark;
		name = "nfsft_wisdom* nfsft_get_wisdom();\n";
		rLen = 34;
		rLoc = 2191;
		rType = 0;
		vrLen = 613;
		vrLoc = 1619;
	};
	4E98AAB3084A1DA60002D4FC = {
		fRef = 4E6CD54B07C54A7E0040176B;
		isa = PBXTextBookmark;
		name = "nfsft.h: 10";
		rLen = 0;
		rLoc = 238;
		rType = 0;
		vrLen = 706;
		vrLoc = 0;
	};
	4E98AAB8084A1ECA0002D4FC = {
		fRef = 4E98AAB9084A1ECA0002D4FC;
		isa = PBXTextBookmark;
		name = "(null): 1";
		rLen = 0;
		rLoc = 0;
		rType = 0;
		vrLen = 574;
		vrLoc = 0;
	};
	4E98AAB9084A1ECA0002D4FC = {
		isa = PBXFileReference;
		name = generateData.m;
		path = /Users/keiner/Temporary/trunk/obsolete/keiner/tests/flft/generateData.m;
		refType = 0;
		sourceTree = "<absolute>";
	};
	4E98AAC2084A23820002D4FC = {
		fRef = 4E98AAA1084A0B790002D4FC;
		isa = PBXTextBookmark;
		name = "flft.c: 72";
		rLen = 0;
		rLoc = 1601;
		rType = 0;
		vrLen = 679;
		vrLoc = 1489;
	};
	4E98AAC3084A23820002D4FC = {
		fRef = 4E6CD54A07C54A7E0040176B;
		isa = PBXTextBookmark;
		name = "nfsft.c: 745";
		rLen = 0;
		rLoc = 18745;
		rType = 0;
		vrLen = 669;
		vrLoc = 0;
	};
	4E98AAC4084A23820002D4FC = {
		fRef = 4E6CD54B07C54A7E0040176B;
		isa = PBXTextBookmark;
		name = "nfsft.h: nfsft_get_wisdom";
		rLen = 0;
		rLoc = 2215;
		rType = 0;
		vrLen = 620;
		vrLoc = 1636;
	};
	4E98AAC8084A23B10002D4FC = {
		fRef = 4E6CD54A07C54A7E0040176B;
		isa = PBXTextBookmark;
		name = "nfsft.c: nfsft_get_wisdom";
		rLen = 0;
		rLoc = 18693;
		rType = 0;
		vrLen = 724;
		vrLoc = 17522;
	};
	4E98AACD084A24CE0002D4FC = {
		fRef = 4E6CD54B07C54A7E0040176B;
		isa = PBXTextBookmark;
		name = "nfsft.h: 9";
		rLen = 0;
		rLoc = 222;
		rType = 0;
		vrLen = 719;
		vrLoc = 0;
	};
	4E98AACF084A24CE0002D4FC = {
		isa = PBXFileReference;
		lastKnownFileType = text;
		name = Makefile.am;
		path = /Users/keiner/Temporary/trunk/obsolete/keiner/tests/Makefile.am;
		refType = 0;
		sourceTree = "<absolute>";
	};
	4E98AAD0084A24CE0002D4FC = {
		fRef = 4E6CD54B07C54A7E0040176B;
		isa = PBXTextBookmark;
		name = "nfsft.h: 9";
		rLen = 0;
		rLoc = 222;
		rType = 0;
		vrLen = 719;
		vrLoc = 0;
	};
	4E98AAD3084A25250002D4FC = {
		fRef = 4E98AACF084A24CE0002D4FC;
		isa = PBXTextBookmark;
		name = "Makefile.am: 1";
		rLen = 0;
		rLoc = 24;
		rType = 0;
		vrLen = 54;
		vrLoc = 0;
	};
	4E98AAD5084A25250002D4FC = {
		fRef = 4E98AACF084A24CE0002D4FC;
		isa = PBXTextBookmark;
		name = "Makefile.am: 1";
		rLen = 0;
		rLoc = 24;
		rType = 0;
		vrLen = 54;
		vrLoc = 0;
	};
	4E98AADB084A25B00002D4FC = {
		fRef = 4E98AAA1084A0B790002D4FC;
		isa = PBXTextBookmark;
		name = "flft.c: 84";
		rLen = 0;
		rLoc = 1954;
		rType = 0;
		vrLen = 686;
		vrLoc = 1489;
	};
	4E98AADC084A25B00002D4FC = {
		fRef = 4E6CD54A07C54A7E0040176B;
		isa = PBXTextBookmark;
		name = nfsft_precompute_guru;
		rLen = 21;
		rLoc = 13004;
		rType = 0;
		vrLen = 1963;
		vrLoc = 12987;
	};
	4E98AAE0084A26310002D4FC = {
		fRef = 4E751580082C0CF4002018A8;
		isa = PBXTextBookmark;
		name = "u.c: 565";
		rLen = 0;
		rLoc = 18970;
		rType = 0;
		vrLen = 1875;
		vrLoc = 18309;
	};
	4E98AAE8084A26E40002D4FC = {
		fRef = 4E98AAA1084A0B790002D4FC;
		isa = PBXTextBookmark;
		name = "flft.c: 81";
		rLen = 0;
		rLoc = 1825;
		rType = 0;
		vrLen = 703;
		vrLoc = 1328;
	};
	4E98AAEC084A274D0002D4FC = {
		fRef = 4E751580082C0CF4002018A8;
		isa = PBXTextBookmark;
		name = "u.c: 565";
		rLen = 0;
		rLoc = 18970;
		rType = 0;
		vrLen = 1822;
		vrLoc = 18309;
	};
	4E98AAF2084A2BD20002D4FC = {
		fRef = 4E98AAA1084A0B790002D4FC;
		isa = PBXTextBookmark;
		name = "flft.c: 94";
		rLen = 0;
		rLoc = 2109;
		rType = 0;
		vrLen = 737;
		vrLoc = 1518;
	};
	4E98AAF4084A2BD20002D4FC = {
		fRef = 4E98AAA1084A0B790002D4FC;
		isa = PBXTextBookmark;
		name = "flft.c: 94";
		rLen = 0;
		rLoc = 2109;
		rType = 0;
		vrLen = 737;
		vrLoc = 1518;
	};
	4E98AAF6084A32C30002D4FC = {
		fRef = 4E751580082C0CF4002018A8;
		isa = PBXTextBookmark;
		name = "u.c: 565";
		rLen = 0;
		rLoc = 18970;
		rType = 0;
		vrLen = 1820;
		vrLoc = 18309;
	};
	4E98AAF8084A32C30002D4FC = {
		fRef = 4E5470E10832A31200CA0375;
		isa = PBXTextBookmark;
		name = "flft.c: 319";
		rLen = 0;
		rLoc = 10142;
		rType = 0;
		vrLen = 1081;
		vrLoc = 9303;
	};
	4E98AAFA084A32C30002D4FC = {
		fRef = 4E751580082C0CF4002018A8;
		isa = PBXTextBookmark;
		name = "u.c: 565";
		rLen = 0;
		rLoc = 18970;
		rType = 0;
		vrLen = 1820;
		vrLoc = 18309;
	};
	4E98AAFB084A32C30002D4FC = {
		fRef = 4E6CD54507C54A7E0040176B;
		isa = PBXTextBookmark;
		name = "  double alpha[(BW_MAX+1)*(BW_MAX+1)];\n";
		rLen = 17;
		rLoc = 3458;
		rType = 0;
		vrLen = 1144;
		vrLoc = 2703;
	};
	4E98AAFC084A32C30002D4FC = {
		fRef = 4E5470E10832A31200CA0375;
		isa = PBXTextBookmark;
		name = "flft.c: 319";
		rLen = 0;
		rLoc = 10142;
		rType = 0;
		vrLen = 1081;
		vrLoc = 9303;
	};
	4E98AAFF084A33900002D4FC = {
		fRef = 4E6CD54A07C54A7E0040176B;
		isa = PBXTextBookmark;
		name = "nfsft.c: 303";
		rLen = 0;
		rLoc = 6952;
		rType = 0;
		vrLen = 972;
		vrLoc = 6442;
	};
	4E98AB01084A33900002D4FC = {
		fRef = 4E6CD54A07C54A7E0040176B;
		isa = PBXTextBookmark;
		name = "nfsft.c: 303";
		rLen = 0;
		rLoc = 6952;
		rType = 0;
		vrLen = 972;
		vrLoc = 6442;
	};
	4E98AB04084A692F0002D4FC = {
		fRef = 4E6CD54507C54A7E0040176B;
		isa = PBXTextBookmark;
		name = "api.h: 173";
		rLen = 0;
		rLoc = 3683;
		rType = 0;
		vrLen = 1069;
		vrLoc = 2703;
	};
	4E98AB05084A692F0002D4FC = {
		fRef = 4E6CD56E07C54E170040176B;
		isa = PBXTextBookmark;
		name = "/** \\defgroup nfsft_legendre NFSFT: Functions related to associated Legendre functions/polynomials */\n";
		rLen = 102;
		rLoc = 147;
		rType = 0;
		vrLen = 542;
		vrLoc = 0;
	};
	4E98AB06084A692F0002D4FC = {
		fRef = 4E6CD54507C54A7E0040176B;
		isa = PBXTextBookmark;
		name = "api.h: 173";
		rLen = 0;
		rLoc = 3683;
		rType = 0;
		vrLen = 1069;
		vrLoc = 2703;
	};
	4E98AB07084A692F0002D4FC = {
		fRef = 4E6CD56E07C54E170040176B;
		isa = PBXTextBookmark;
		name = "/** \\defgroup nfsft_legendre NFSFT: Functions related to associated Legendre functions/polynomials */\n";
		rLen = 102;
		rLoc = 147;
		rType = 0;
		vrLen = 542;
		vrLoc = 0;
	};
	4E98AB0D084A696B0002D4FC = {
		fRef = 4E6CD57607C54E630040176B;
		isa = PBXTextBookmark;
		name = eval_al_thresh;
		rLen = 14;
		rLoc = 2101;
		rType = 0;
		vrLen = 806;
		vrLoc = 1870;
	};
	4EAD68CA083BC5A900C61F13 = {
		fRef = 4EAD68CB083BC5A900C61F13;
		isa = PBXTextBookmark;
		name = "(null): 710";
		rLen = 0;
		rLoc = 29197;
		rType = 0;
		vrLen = 1450;
		vrLoc = 28360;
	};
	4EAD68CB083BC5A900C61F13 = {
		isa = PBXFileReference;
		lastKnownFileType = text;
		name = doxygen.cfg;
		path = /Users/keiner/Temporary/trunk/obsolete/keiner/doxygen.cfg;
		refType = 0;
		sourceTree = "<absolute>";
	};
	4EAD68CE083BC5A900C61F13 = {
		fRef = 4EAD68CF083BC5A900C61F13;
		isa = PBXTextBookmark;
		name = "(null): 710";
		rLen = 0;
		rLoc = 29197;
		rType = 0;
		vrLen = 1450;
		vrLoc = 28360;
	};
	4EAD68CF083BC5A900C61F13 = {
		isa = PBXFileReference;
		lastKnownFileType = text;
		name = doxygen.cfg;
		path = /Users/keiner/Temporary/trunk/obsolete/keiner/doxygen.cfg;
		refType = 0;
		sourceTree = "<absolute>";
	};
	4EAD690B083BC7E000C61F13 = {
		fRef = 4E6CD5D607C555500040176B;
		isa = PBXTextBookmark;
		name = "direct.h: 40";
		rLen = 0;
		rLoc = 1472;
		rType = 0;
		vrLen = 1422;
		vrLoc = 86;
	};
	4EAD6913083BC8A700C61F13 = {
		fRef = 4E6CD5D707C555500040176B;
		isa = PBXTextBookmark;
		name = "direct.c: 137";
		rLen = 0;
		rLoc = 3686;
		rType = 0;
		vrLen = 679;
		vrLoc = 3440;
	};
	4EAD691A083BC93100C61F13 = {
		isa = PBXFileReference;
		lastKnownFileType = text;
		name = configure.in;
		path = /Users/keiner/Temporary/trunk/obsolete/keiner/configure.in;
		refType = 0;
		sourceTree = "<absolute>";
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {2232, 735}}";
			sepNavSelRange = "{1479, 0}";
			sepNavVisRect = "{{1254, 159}, {964, 576}}";
		};
	};
	4EAD692A083BC9A900C61F13 = {
		isa = PBXFileReference;
		lastKnownFileType = text;
		name = headers.m4;
		path = /sw/share/autoconf/autoconf/headers.m4;
		refType = 0;
		sourceTree = "<absolute>";
	};
	4EAD6954083BD14300C61F13 = {
		fRef = 4E8A26E10838C49000216481;
		isa = PBXTextBookmark;
		name = "performance.c: 84";
		rLen = 0;
		rLoc = 2042;
		rType = 0;
		vrLen = 952;
		vrLoc = 3963;
	};
	4EAD6963083BD20500C61F13 = {
		isa = PBXFileReference;
		lastKnownFileType = text;
		name = general.m4;
		path = /sw/share/autoconf/autoconf/general.m4;
		refType = 0;
		sourceTree = "<absolute>";
	};
	4EAD6969083BD39C00C61F13 = {
		fRef = 4EAD6963083BD20500C61F13;
		isa = PBXTextBookmark;
		name = AC_REQUIRE;
		rLen = 10;
		rLoc = 5700;
		rType = 0;
		vrLen = 996;
		vrLoc = 5286;
	};
	4EAD696A083BD39C00C61F13 = {
		fRef = 4EAD692A083BC9A900C61F13;
		isa = PBXTextBookmark;
		name = AC_REQUIRE;
		rLen = 10;
		rLoc = 10098;
		rType = 0;
		vrLen = 1212;
		vrLoc = 9454;
	};
	4EAD69A2083BE07E00C61F13 = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {961, 7696}}";
			sepNavSelRange = "{7141, 0}";
			sepNavVisRect = "{{0, 3981}, {961, 470}}";
		};
	};
	4EAD69A3083BE08000C61F13 = {
		fRef = 4E02C48E082F816D00EC0863;
		isa = PBXTextBookmark;
		name = "convolution.c: 57";
		rLen = 0;
		rLoc = 1427;
		rType = 0;
		vrLen = 860;
		vrLoc = 1754;
	};
	4EAD69B0083BE0B900C61F13 = {
		isa = PBXFileReference;
		lastKnownFileType = text;
		name = Makefile.am;
		path = /Users/keiner/Temporary/trunk/obsolete/keiner/examples/Makefile.am;
		refType = 0;
		sourceTree = "<absolute>";
	};
	4EAD69B6083BE11400C61F13 = {
		fRef = 4EAD69B0083BE0B900C61F13;
		isa = PBXTextBookmark;
		name = "Makefile.am: 1";
		rLen = 0;
		rLoc = 10;
		rType = 0;
		vrLen = 53;
		vrLoc = 0;
	};
	4EAD69BC083BE16100C61F13 = {
		fRef = 4EAD691A083BC93100C61F13;
		isa = PBXTextBookmark;
		name = "configure.in: 45";
		rLen = 0;
		rLoc = 1375;
		rType = 0;
		vrLen = 1198;
		vrLoc = 240;
	};
	4EAD69C0083BE6C300C61F13 = {
		fRef = 4EAD69C1083BE6C300C61F13;
		isa = PBXTextBookmark;
		name = "(null): 1";
		rLen = 0;
		rLoc = 0;
		rType = 0;
		vrLen = 510;
		vrLoc = 0;
	};
	4EAD69C1083BE6C300C61F13 = {
		isa = PBXFileReference;
		lastKnownFileType = sourcecode.c.objc;
		name = accuracy.m;
		path = /Users/keiner/Temporary/trunk/obsolete/keiner/tests/accuracy/accuracy.m;
		refType = 0;
		sourceTree = "<absolute>";
	};
	4EAD69CB083BE6CE00C61F13 = {
		fRef = 4EAD69A2083BE07E00C61F13;
		isa = PBXTextBookmark;
		name = "accuracy.c: 187";
		rLen = 0;
		rLoc = 4824;
		rType = 0;
		vrLen = 1004;
		vrLoc = 4141;
	};
	4EAD69E4083BF94200C61F13 = {
		isa = PBXFileReference;
		lastKnownFileType = sourcecode.c.objc;
		name = performance.m;
		path = /Users/keiner/Temporary/trunk/obsolete/keiner/tests/performance/performance.m;
		refType = 0;
		sourceTree = "<absolute>";
	};
	4EAD69EE083BFCC000C61F13 = {
		fRef = 4EAD69E4083BF94200C61F13;
		isa = PBXTextBookmark;
		name = "print('-depsc',datasets{k,3});";
		rLen = 30;
		rLoc = 664;
		rType = 0;
		vrLen = 701;
		vrLoc = 0;
	};
	4EAD69EF083BFCC000C61F13 = {
		fRef = 4EAD69E4083BF94200C61F13;
		isa = PBXTextBookmark;
		name = "print('-depsc',datasets{k,3});";
		rLen = 30;
		rLoc = 664;
		rType = 0;
		vrLen = 701;
		vrLoc = 0;
	};
	4EB20A1E07D4B30C00FD1AB8 = {
		activeArgIndex = 2147483647;
		activeArgIndices = (
			NO,
			NO,
			NO,
		);
		argumentStrings = (
			"< ../../matlab/temp.in",
			"> ../matlab/temp.out",
			"1 1024 1 256 1024 256 0",
		);
		configStateDict = {
			"PBXLSLaunchAction-0" = {
				PBXLSLaunchAction = 0;
				PBXLSLaunchStartAction = 1;
				PBXLSLaunchStdioStyle = 2;
				PBXLSLaunchStyle = 0;
				class = PBXLSRunLaunchConfig;
				displayName = "Executable Runner";
				identifier = com.apple.Xcode.launch.runConfig;
				remoteHostInfo = "";
				startActionInfo = "";
			};
		};
		cppStopOnCatchEnabled = 0;
		cppStopOnThrowEnabled = 0;
		customDataFormattersEnabled = 1;
		debuggerPlugin = GDBDebugging;
		disassemblyDisplayState = 0;
		dylibVariantSuffix = "";
		enableDebugStr = 1;
		environmentEntries = (
		);
		isa = PBXExecutable;
		libgmallocEnabled = 0;
		name = NFSFT;
		savedGlobals = {
		};
		shlibInfoDictList = (
		);
		sourceDirectories = (
		);
		startupPath = /Users/keiner/Temporary/trunk/obsolete/keiner/examples/wrapper;
	};
	4EB6E45F082FF153003AAA48 = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {766, 1484}}";
			sepNavSelRange = "{0, 0}";
			sepNavVisRect = "{{0, 0}, {766, 406}}";
		};
	};
	4EB6E460082FF18D003AAA48 = {
		fRef = 4E6CD57607C54E630040176B;
		isa = PBXTextBookmark;
		name = eval_al_thresh;
		rLen = 14;
		rLoc = 2101;
		rType = 0;
		vrLen = 669;
		vrLoc = 2539;
	};
	4EB6E463082FF18D003AAA48 = {
		fRef = 4EB6E45F082FF153003AAA48;
		isa = PBXTextBookmark;
		name = "stabilization.c: 1";
		rLen = 0;
		rLoc = 0;
		rType = 0;
		vrLen = 646;
		vrLoc = 0;
	};
	4EB6E510083143AE003AAA48 = {
		fRef = 4E02C48E082F816D00EC0863;
		isa = PBXTextBookmark;
		name = "convolution.c: 104";
		rLen = 0;
		rLoc = 2624;
		rType = 0;
		vrLen = 598;
		vrLoc = 2261;
	};
	4ECA774C08322F6D008ADA24 = {
		fRef = 4EB6E45F082FF153003AAA48;
		isa = PBXTextBookmark;
		name = "stabilization.c: 1";
		rLen = 0;
		rLoc = 0;
		rType = 0;
		vrLen = 640;
		vrLoc = 0;
	};
	4ECC02D007E2065C007D664C = {
		fRef = 4E6CD56E07C54E170040176B;
		isa = PBXTextBookmark;
		name = eval_al;
		rLen = 7;
		rLoc = 1418;
		rType = 0;
		vrLen = 749;
		vrLoc = 460;
	};
	4ED51032083E62E400BC1579 = {
		fRef = 4E6E40C5082CB46F00642FF0;
		isa = PBXTextBookmark;
		name = "utils.c: updatec_axpy";
		rLen = 0;
		rLoc = 20456;
		rType = 0;
		vrLen = 556;
		vrLoc = 20170;
	};
	4ED51052083E64DE00BC1579 = {
		fRef = 4E6CD54C07C54A7E0040176B;
		isa = PBXTextBookmark;
		name = "void updatec_axpy_hat(complex **x,double a, complex **y, int M, int N)\n";
		rLen = 64;
		rLoc = 5892;
		rType = 0;
		vrLen = 524;
		vrLoc = 5610;
	};
	4ED51053083E64DE00BC1579 = {
		fRef = 4E6CD54D07C54A7E0040176B;
		isa = PBXTextBookmark;
		name = "util.h: updatec_axpy_hat";
		rLen = 0;
		rLoc = 1269;
		rType = 0;
		vrLen = 1230;
		vrLoc = 115;
	};
	4EDA6CF007A439F1008B1386 = {
		uiCtxt = {
			sepNavIntBoundsRect = "{{0, 0}, {942, 1119}}";
			sepNavSelRange = "{518, 0}";
			sepNavVisRect = "{{0, 0}, {942, 423}}";
		};
	};
	4EDEC4EB07CE349A00514E5A = {
		fRef = 4EDA6CF007A439F1008B1386;
		isa = PBXTextBookmark;
		name = "main.1: 14";
		rLen = 0;
		rLoc = 518;
		rType = 0;
		vrLen = 957;
		vrLoc = 0;
	};
	8DD76F620486A84900D96B5E = {
		activeExec = 0;
		executables = (
			4EB20A1E07D4B30C00FD1AB8,
		);
	};
}
