/*
 * Copyright (c) 2002, 2009 Jens Keiner, Stefan Kunis, Daniel Potts
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

/* $Id: doxygen.c 3475 2010-04-11 14:58:03Z keiner $ */

/**
 * @defgroup fpt FPT - Fast polynomial transform
 * @{
 *
 * This module implements fast polynomial transforms. In the following, we
 * abbreviate the term "fast polynomial transforms" by FPT.
 */

/*! \fn fpt_set fpt_init(const int M, const int t, const unsigned int flags)
 * Initializes a set of precomputed data for DPT transforms of equal length.
 *
 * \arg M The maximum DPT transform index \f$M \in \mathbb{N}_0\f$. The
 *        individual transforms are addressed by and index number \f$m \in
 *        \mathbb{N}_0\f$ with range \f$m = 0,\ldots,M\f$. The total number
 *        of transforms is therefore \f$M+1\f$.
 * \arg t The exponent \f$t \in \mathbb{N}, t \ge 2\f$ of the transform length
 *        \f$N = 2^t \in \mathbb{N}, N \ge 4\f$
 * \arg flags A bitwise combination of the flags FPT_NO_STABILIZATION,
 *
 * \author Jens Keiner
 */

/*! \fn void fpt_precompute(fpt_set set, const int m, R *alpha, R *beta, R *gam, int k_start, const R threshold)
 * Computes the data required for a single DPT transform.
 *
 * \arg set The set of DPT transform data where the computed data will be stored.
 * \arg m The transform index \f$m \in \mathbb{N}, 0 \le m \le M\f$.
 * \arg alpha The three-term recurrence coefficients \f$\alpha_k \in
 *      \mathbb{R}\f$ for \f$k=0,\ldots,N\f$ such that \verbatim alpha[k]
 *      \endverbatim \f$=\alpha_k\f$.
 * \arg beta The three-term recurrence coefficients \f$\beta_k \in \mathbb{R}\f$
 *            for \f$k=0,\ldots,N\f$ such that \verbatim beta[k] \endverbatim
 *            \f$=\beta_k\f$.
 * \arg gamma The three-term recurrence coefficients \f$\gamma_k \in
 *            \mathbb{R}\f$ for \f$k=0,\ldots,N\f$ such that \verbatim gamma[k]
 *            \endverbatim \f$=\gamma_k\f$.
 * \arg k_start The index \f$k_{\text{start}} \in \mathbb{N}_0,
 *              0 \le k_{\text{start}} \le N\f$
 * \arg threshold The treshold \f$\kappa \in \mathbb{R}, \kappa > 0\f$.
 *
 * \author Jens Keiner
 */

/*! \fn void fpt_direct_trafo(fpt_set set, const int m, const C *x, C *y, const int k_end, const unsigned int flags)
 * Computes a single DPT transform.
 *
 * \arg set
 * \arg m
 * \arg x
 * \arg y
 * \arg k_end
 * \arg flags
 */

/*! \fn void X(trafo)(X(set) set, const int m, const C *x, C *y, const int k_end, const unsigned int flags)
 * Computes a single DPT transform.
 *
 * \arg set
 * \arg m
 * \arg x
 * \arg y
 * \arg k_end
 * \arg flags
 */

/*! \fn void fpt_direct_transposed(fpt_set set, const int m, C *x, C *y, const int k_end, const unsigned int flags)
 * Computes a single DPT transform.
 *
 * \arg set
 * \arg m
 * \arg x
 * \arg y
 * \arg k_end
 * \arg flags
 */

/*! \fn void fpt_transposed(fpt_set set, const int m, C *x, C *y, const int k_end, const unsigned int flags)
 * Computes a single DPT transform.
 *
 * \arg set
 * \arg m
 * \arg x
 * \arg y
 * \arg k_end
 * \arg flags
 */

/** \def FPT_NO_FAST_ALGORITHM
 *  If set, TODO complete comment.
 */

/** \def FPT_NO_DIRECT_ALGORITHM
 *  If set, TODO complete comment.
 */

/** \def FPT_NO_STABILIZATION
 *  If set, no stabilization will be used.
 */

/** \def FPT_PERSISTENT_DATA
 *  If set, TODO complete comment.
 */

/** \def FPT_FUNCTION_VALUES
 *  If set, the output are function values at Chebyshev nodes rather than 
 *  Chebyshev coefficients.
 */

/** \def FPT_AL_SYMMETRY
 *  If set, TODO complete comment.
 */

/** @}
 */
